(()=>{"use strict";var __webpack_modules__={828:()=>{eval('\n;// CONCATENATED MODULE: ./src/modules/functions.js\n  // преобразование даты к виду ДД.ММ.ГГГГ\n  const convertDate = (data) => {\n      let date = new Date(data)\n\n      let day = date.getDate()\n      if (day < 10) {\n          day = \'0\' + day\n      }\n      let month = date.getMonth() + 1\n      if (month < 10) {\n          month = \'0\' + month\n      }\n      let year = date.getFullYear()\n\n      return  day + \'.\' + month + \'.\' + year\n  }\n\n\n  // вычисление номера недели (четная - нечетная)\n  const getWeek = (current, start) => {\n      let currentDate = new Date(current)\n      let startDate = new Date(start)\n\n      let dayOfWeekOfStartDate = startDate.getDay()\n      if (dayOfWeekOfStartDate == 0) dayOfWeekOfStartDate = 7\n\n      let numberOfDays = Math.floor((currentDate - startDate) / (24 * 60 * 60 * 1000)) + 1\n      let weekNumber = Math.ceil(( numberOfDays + dayOfWeekOfStartDate - 1) / 7)\n\n      return weekNumber % 2 === 0 ? \'even\' : \'odd\'\n  }\n\n\n  // получение названия дня недели\n  function getWeekDayAbbr(data) {\n      let date = new Date(data)\n\n      let days = [\'н\', \'пн\', \'в\', \'c\', \'ч\', \'пт\', \'сб\']\n\n      return days[date.getDay()]\n  }\n\n  // получение названия месяца\n  const getMonthName = (date) => {\n      const months = [\'січня\', \'лютого\', \'березня\', \'квітня\', \'травня\', \'червня\', \'липня\', \'серпня\', \'вересня\', \'жовтня\', \'листопада\', \'грудня\']\n\n      return months[date.getMonth()]\n  }\n\n\n;// CONCATENATED MODULE: ./src/modules/holidays/vacations.js\n\n\nconst vacations = [\n  {\n    name: "fall",\n    startDate: "2022-10-22",\n    endDate: "2022-10-30",\n    dates: [],\n  },\n  {\n    name: "winter",\n    startDate: "2022-12-24",\n    endDate: "2023-01-08",\n    dates: [],\n  },\n  {\n    name: "spring",\n    startDate: "2023-03-25",\n    endDate: "2023-04-02",\n    dates: [],\n  },\n]\n\n// заполнение массива дат для определенных каникул\nconst createArrayDates = (vacationName) => {\n  let foundVacation = vacations.find((item) => item.name == vacationName)\n  foundVacation.dates = []\n  for (let i = Date.parse(foundVacation.startDate); i <= Date.parse(foundVacation.endDate);i = i + 1000 * 3600 * 24\n  ) {\n    foundVacation.dates.push(i)\n  }\n}\n\ncreateArrayDates("fall")\ncreateArrayDates("winter")\ncreateArrayDates("spring")\n\n//===== Формирование массива дат всех каникул ===========\nlet arrVacations = []\nconst createArrVacations = () => {\n  arrVacations = []\n  vacations.forEach((item) => {\n    arrVacations = arrVacations.concat(item.dates)\n  })\n}\n\ncreateArrVacations()\n\n// выаод каникул на странице\nfor (let item of vacations) {\n  document.getElementById("vacations").innerHTML += `\n        <div class="d-flex justify-content-between align-items-center mb-2">\n            <div>з <span>${convertDate(item.startDate)}</span> до <span>${convertDate(item.endDate)}</span> </div>\n            <div>\n                <button type="button" class="btn btn-primary" name="btnEditVacation" data-vacation-name=\'${item.name}\' data-bs-toggle="modal" data-bs-target="#modalEditVacationDates">\n                    <i class="bi bi-pencil-square"></i>\n                </button>\n                <button type="button" class="btn btn-primary" name="btnDeleteVacation" data-vacation-name=\'${item.name}\' data-bs-toggle="modal" data-bs-target="#modalDeleteVacation">\n                    <i class="bi bi-x-square"></i>\n                </button>\n            </div>\n        </div>\n    `\n}\n\n\n;// CONCATENATED MODULE: ./src/modules/holidays/vacation-delete.js\n\n\nlet vacationName\nlet divVacation\n\nconst clickBtnDeleteVacation = () => {\n  for (let btn of document.getElementsByName("btnDeleteVacation")) {\n    btn.addEventListener("click", () => {\n      vacationName = btn.dataset.vacationName\n      divVacation = btn.parentElement.parentElement\n    })\n  }\n}\nclickBtnDeleteVacation()\n\nconst deleteVacation = (vacationName) => {\n  let foundVacation = vacations.findIndex((item) => item.name == vacationName)\n  vacations.splice(foundVacation, 1)\n  divVacation.remove()\n}\n\ndocument.getElementById("btnConfirmDeleteVacation").addEventListener("click", () => {\n    deleteVacation(vacationName)\n    createArrVacations()\n  })\n\n\n\n;// CONCATENATED MODULE: ./src/modules/holidays/vacation-edit.js\n\n\n\nconst editVacationDates = (vacationName, startDate, endDate, displayVacationStartDate, displayVacationEndDate) => {\n    let foundVacation = vacations.find(item => item.name == vacationName)\n    foundVacation.startDate = startDate\n    foundVacation.endDate = endDate\n    displayVacationStartDate.innerText = convertDate(startDate)\n    displayVacationEndDate.innerText = convertDate(endDate)\n    createArrayDates(vacationName)\n    createArrVacations()\n}\n;// CONCATENATED MODULE: ./src/modules/holidays/vacation-add.js\n\n\n\nconst addNewVacation = (vacationName, startDate, endDate) => {\n\n    vacations.push({\n        name: vacationName,\n        startDate: startDate,\n        endDate: endDate,\n        dates: []\n    })\n\n    document.getElementById(\'vacations\').innerHTML += `\n        <div class="d-flex justify-content-between align-items-center mb-2">\n            <div>з <span>${convertDate(startDate)}</span> до <span>${convertDate(endDate)}</span> </div>\n            <div>\n                <button type="button" class="btn btn-primary" name="btnEditVacation" data-vacation-name=\'${vacationName}\' data-bs-toggle="modal" data-bs-target="#modalEditVacationDates">\n                    <i class="bi bi-pencil-square"></i>\n                </button>\n                <button type="button" class="btn btn-primary" name="btnDeleteVacation" data-vacation-name=\'${vacationName}\' data-bs-toggle="modal" data-bs-target="#modalDeleteVacation">\n                    <i class="bi bi-x-square"></i>\n                </button>\n            </div>\n        </div>\n    `\n    createArrayDates(vacationName)\n    createArrVacations()\n}\n;// CONCATENATED MODULE: ./src/modules/holidays/modal-edit-vacations.js\n\n\n\n\n\nconst editVacations = () => {\n  const modalEditVacationDates = new bootstrap.Modal("#modalEditVacationDates")\n  const formEditVacationDates = document.getElementById("formEditVacationDates")\n\n  let vacationName\n  let newVacationName = 0\n  let displayVacationStartDate\n  let displayVacationEndDate\n  let flag\n\n  const clickBtnEditVacation = () => {\n    for (let btn of document.getElementsByName("btnEditVacation")) {\n      btn.addEventListener("click", () => {\n        flag = "edit"\n        vacationName = btn.dataset.vacationName\n        displayVacationStartDate = btn.parentElement.previousElementSibling.firstElementChild\n        displayVacationEndDate = btn.parentElement.previousElementSibling.lastElementChild\n\n        let foundVacation = vacations.find((item) => item.name == vacationName)\n        formEditVacationDates[0].value = foundVacation.startDate\n        formEditVacationDates[1].value = foundVacation.endDate\n      })\n    }\n  }\n  clickBtnEditVacation()\n\n  document.getElementById("btnAddVacation").addEventListener("click", () => {\n    flag = "add"\n    newVacationName ++\n    vacationName = newVacationName\n  })\n\n  // действия при закрытии модального окна без сохранения изменений\n  modalEditVacationDates._element.addEventListener("hidden.bs.modal", (e) => {\n    formEditVacationDates.reset()\n    formEditVacationDates.classList.remove("was-validated")\n    document.querySelector(".validationRange").classList.add("d-none")\n    for (let item of formEditVacationDates.inputVacationDate) {\n      item.classList.remove("is-invalid")\n      item.classList.remove("is-valid")\n    }\n  })\n\n  // проверка ввода правильного диапазона дат\n  let validationRange = true\n  for (let item of formEditVacationDates.inputVacationDate) {\n    item.addEventListener("change", () => {\n      if (formEditVacationDates[0].value != "" && formEditVacationDates[1].value != "") {\n        if (formEditVacationDates[0].value > formEditVacationDates[1].value) {\n          formEditVacationDates.classList.remove("was-validated")\n          document.querySelector(".validationRange").classList.remove("d-none")\n          formEditVacationDates[0].classList.remove("is-valid")\n          formEditVacationDates[1].classList.remove("is-valid")\n          formEditVacationDates[0].classList.add("is-invalid")\n          formEditVacationDates[1].classList.add("is-invalid")\n          validationRange = false\n        } else {\n          document.querySelector(".validationRange").classList.add("d-none")\n          formEditVacationDates[0].classList.remove("is-invalid")\n          formEditVacationDates[1].classList.remove("is-invalid")\n          formEditVacationDates[0].classList.add("is-valid")\n          formEditVacationDates[1].classList.add("is-valid")\n          validationRange = true\n        }\n      }\n    })\n  }\n\n  // обработка формы изменения новых дат каникул\n  formEditVacationDates.addEventListener("submit", function (e) {\n    e.preventDefault()\n\n    if (validationRange == true) {\n      this.classList.add("was-validated")\n      if (this.checkValidity()) {\n        let startDate = this[0].value\n        let endDate = this[1].value\n\n        if (flag == "add") {\n          addNewVacation(vacationName, startDate, endDate)\n          clickBtnEditVacation()\n          clickBtnDeleteVacation()\n        } else if (flag == "edit") {\n          editVacationDates(vacationName, startDate, endDate, displayVacationStartDate, displayVacationEndDate\n          )\n        }\n\n        modalEditVacationDates.hide()\n        this.classList.remove("was-validated")\n        this.reset()\n      }\n    }\n  })\n}\n\n/* harmony default export */ const modal_edit_vacations = (editVacations);\n\n;// CONCATENATED MODULE: ./src/modules/main-form/default-periods.js\nconst defaultPeriods = () => {\n  document.getElementById("btnFirstSemester").addEventListener("click", () => {\n    document.getElementById("start-date").value = "2022-09-01"\n    document.getElementById("end-date").value = "2022-12-23"\n  })\n\n  document.getElementById("btnSecondSemester").addEventListener("click", () => {\n    document.getElementById("start-date").value = "2023-01-09"\n    document.getElementById("end-date").value = "2023-06-30"\n  })\n}\n\n/* harmony default export */ const default_periods = (defaultPeriods);\n;// CONCATENATED MODULE: ./src/modules/main-form/count-lessons.js\nconst countLessons = () => {\n  const numberOfLessons = document.getElementsByName("numberOfLessons")\n\n  document.getElementsByName("day").forEach((item, index) => {\n    item.addEventListener("change", () => {\n      if (numberOfLessons[index].hasAttribute("disabled")) {\n        numberOfLessons[index].removeAttribute("disabled")\n      } else {\n        numberOfLessons[index].setAttribute("disabled", "disabled")\n      }\n\n      document.getElementById(\'feedbackCheckbox\').classList.add("d-none")\n    })\n  })\n}\n\n/* harmony default export */ const count_lessons = (countLessons);\n;// CONCATENATED MODULE: ./src/modules/main-form/modal-count-lessons.js\nconst modalCountLessons = () => {\n  const modalNumberOfLessons = new bootstrap.Modal("#modalNumberOfLessons")\n  const selectsNumberOfLessons = document.querySelectorAll(".selectNumberOfLessons")\n  const inputsNumderOfLessons = document.querySelectorAll(".inputNumderOfLessons")\n  const inputsRadioWeek = document.getElementsByName("radioWeek")\n  const inputEveryWeek = document.getElementById("inputEveryWeek")\n  const inputOddWeeks = document.getElementById("inputOddWeeks")\n  const inputEvenWeeks = document.getElementById("inputEvenWeeks")\n  const formChangeNumber = document.forms.changeNumberOfLessons\n\n  let weekDay\n\n  // вызов модального окна ввода количества уроков\n  selectsNumberOfLessons.forEach((item, index) => {\n    item.addEventListener("change", () => {\n      if (item.value == "other") {\n        modalNumberOfLessons.show()\n        weekDay = index\n      }\n    })\n  })\n\n  // действия при закрытии модального окна без сохранения изменений\n  modalNumberOfLessons._element.addEventListener("hidden.bs.modal", (e) => {\n    formChangeNumber.reset()\n    formChangeNumber.classList.remove("was-validated")\n\n    for (let elem of inputsNumderOfLessons) {\n      elem.setAttribute("disabled", "disabled")\n    }\n\n    if (selectsNumberOfLessons[weekDay].value == "other") {\n      selectsNumberOfLessons[weekDay].value = "1"\n    }\n  })\n\n  // активация/деактивация полей ввода количества уроков\n  for (let node of inputsRadioWeek) {\n    node.addEventListener("change", () => {\n      for (let elem of inputsNumderOfLessons) {\n        elem.setAttribute("disabled", "disabled")\n        elem.value = ""\n      }\n      for (let elem of node.parentElement.getElementsByTagName("*")) {\n        if (elem.classList.contains("inputNumderOfLessons")) {\n          elem.removeAttribute("disabled")\n        }\n      }\n    })\n  }\n\n  // подставление 0 в поле при заполнении только четного/нечетного поля\n  formChangeNumber.inWeek.forEach((item, index) => {\n    item.addEventListener("input", () => {\n      formChangeNumber.inWeek.forEach((it, ind) => {\n        if (ind != index && it.value == "") {\n          it.value = "0"\n        }\n      })\n    })\n  })\n\n  // обработка данных полей ввода количества уроков\n  formChangeNumber.addEventListener("submit", function(e) {\n    e.preventDefault()\n    this.classList.add("was-validated")\n\n    if (this.checkValidity()) {\n      // добавление нового элемента option в зависимости от выбора\n      let option\n      for (let node of inputsRadioWeek) {\n        if (node.checked && node.id == "radioEveryWeek") {\n          option = new Option(\n            inputEveryWeek.value,\n            inputEveryWeek.value,\n            false,\n            true\n          )\n        } else if (node.checked && node.id == "radioInAWeek") {\n          option = new Option(\n            inputOddWeeks.value + "/" + inputEvenWeeks.value,\n            inputOddWeeks.value + "/" + inputEvenWeeks.value,\n            false,\n            true\n          )\n        }\n      }\n      // проверка не дублируется ли option\n      let n = 0\n      for (let elem of selectsNumberOfLessons[weekDay].options) {\n        if (elem.value == option.value) {\n          n++\n        }\n      }\n      if (n == 0) {\n        selectsNumberOfLessons[weekDay].prepend(option)\n      } else {\n        selectsNumberOfLessons[weekDay].value = option.value\n      }\n\n      modalNumberOfLessons.hide()\n    }\n  })\n}\n\n/* harmony default export */ const modal_count_lessons = (modalCountLessons);\n;// CONCATENATED MODULE: ./src/modules/holidays/current-period.js\nconst now = new Date()\n\nlet firstSemesterYear\nlet secondSemesterYear\n\nif (now.getMonth() >= 0 && now.getMonth() < 6) {\n  firstSemesterYear = now.getFullYear() - 1\n  secondSemesterYear = now.getFullYear()\n} else {\n  firstSemesterYear = now.getFullYear()\n  secondSemesterYear = now.getFullYear() + 1\n}\n\n// вывод периода в заголовке\nconst title = document.getElementById("title")\ntitle.firstElementChild.innerText = firstSemesterYear\ntitle.lastElementChild.innerText = secondSemesterYear\n\n\n;// CONCATENATED MODULE: ./src/modules/holidays/holidays.js\n\n\n\n// официальные праздничные дни\nconst holidays = [\n  {\n    name: "День української державності",\n    date: firstSemesterYear + "-07-28",\n  },\n  {\n    name: "День Незaлежності України",\n    date: firstSemesterYear + "-08-24",\n  },\n  {\n    name: "День захисників і захисниць України",\n    date: firstSemesterYear + "-10-14",\n  },\n  {\n    name: "Різдво Христове",\n    date: firstSemesterYear + "-12-25",\n  },\n  {\n    name: "Новий рік",\n    date: secondSemesterYear + "-01-01",\n  },\n  {\n    name: "Різдво Христове",\n    date: secondSemesterYear + "-01-07",\n  },\n  {\n    name: "Міжнародний жіночий день",\n    date: secondSemesterYear + "-03-08",\n  },\n  {\n    name: "Великдень",\n    date: secondSemesterYear + "-04-16",\n  },\n  {\n    name: "День праці",\n    date: secondSemesterYear + "-05-01",\n  },\n  {\n    name: "День Перемоги",\n    date: secondSemesterYear + "-05-09",\n  },\n  {\n    name: "свято Трійці",\n    date: secondSemesterYear + "-06-04",\n  },\n  {\n    name: "День Конституції України",\n    date: secondSemesterYear + "-06-28",\n  },\n]\n\nconst arrHolidays = []\n\n// вывод празднтков на странице\nfor (let item of holidays) {\n  let date = new Date(item.date)\n\n  // arrHolidays.push(date.getTime())\n\n  document.getElementById("collapseHolidays").innerHTML += `\n          <p>${date.getDate()} ${getMonthName(date)} — ${item.name}</p>\n      `\n}\n\n\n\n;// CONCATENATED MODULE: ./src/modules/main-form/output.js\n\n\nconst outDate = document.getElementById("out-date")\nconst outCount = document.getElementById("out-count")\nconst outDay = document.getElementById("out-day")\nconst outTable = document.getElementById("out-table")\n\n// функция очистки поля\nconst outputReset = () => {\n  outDate.innerHTML = ""\n  outCount.innerHTML = ""\n  outDay.innerHTML = ""\n  outTable.innerHTML = ""\n}\n\n// функция выводв шапки таблицы\nconst outputHead = () => {\n  outCount.innerHTML += `\n                <tr>\n                    <th>п/н</th>\n                </tr>\n            `\n\n  outDate.innerHTML += `\n                <tr>\n                    <th>дата</th>\n                </tr>\n            `\n\n  outDay.innerHTML += `\n                <tr>\n                    <th>д/т</th>\n                </tr>\n            `\n\n  outTable.innerHTML += `\n                <tr>\n                    <th>п/н</th>\n                    <th>дата</th>\n                    <th>д/т</th>\n                </tr>\n            `\n}\n\n// функция выводв результата\nconst outputTable = (number, date, sn) => {\n  for (let i = 0; i < number; i++) {\n    outCount.innerHTML += `\n                <tr>\n                    <td>${sn}</td>\n                </tr>\n            `\n\n    outDate.innerHTML += `\n                <tr>\n                    <td>${convertDate(date)}</td>\n                </tr>\n            `\n\n    outDay.innerHTML += `\n                <tr>\n                    <td>${getWeekDayAbbr(date)}</td>\n                </tr>\n            `\n\n    outTable.innerHTML += `\n                <tr>\n                    <td>${sn}</td>\n                    <td>${convertDate(date)}</td>\n                    <td>${getWeekDayAbbr(date)}</td>\n                </tr>\n            `\n    \n    sn ++\n  }\n  return sn\n}\n;// CONCATENATED MODULE: ./src/modules/main-form/form.js\n\n\n\n\n\nconst form_form = () => {\n\n  const startDate = document.getElementById("start-date")\n  const endDate = document.getElementById("end-date")\n  \n  document.getElementById("form-main").addEventListener("submit", function(e) {\n    e.preventDefault()\n    outputReset()\n    document.getElementById("exportXLSX").classList.add("d-none")\n\n    this.classList.add("was-validated")\n\n    if (this.checkValidity()) {\n\n      let daysWeek = []\n      let checked = false\n\n      for (let elem of document.getElementsByName("day")) {\n        if (elem.checked) {\n          daysWeek.push(+elem.value)\n          checked = true\n        }\n      }\n\n      // проверка ввода правильного диапазона дат\n      if (endDate.value < startDate.value) {\n        document.getElementById(\'feedbackRange\').classList.remove("d-none")\n        startDate.classList.add("is-invalid")\n        endDate.classList.add("is-invalid")\n        for (let item of document.getElementsByName(\'range\')) {\n          item.addEventListener(\'change\', () => {\n            if (endDate.value >= startDate.value) {\n              document.getElementById(\'feedbackRange\').classList.add("d-none")\n              startDate.classList.remove("is-invalid")\n              endDate.classList.remove("is-invalid")\n            }\n          })\n        }\n      }\n\n      // проверка выбраны ли дни с выводом предупреждения\n      checked == false\n        ? document.getElementById(\'feedbackCheckbox\').classList.remove("d-none")\n        : document.getElementById(\'feedbackCheckbox\').classList.add("d-none")\n\n      if (checked == true && endDate.value >= startDate.value) {\n\n        const start = Date.parse(startDate.value)\n        const end = Date.parse(endDate.value)\n\n        let sn = document.getElementById("initialNumber").value\n\n        outputHead()\n        document.getElementById("exportXLSX").classList.remove("d-none")\n\n        // перебор всех дат в выбранном промежутке\n        for (let i = start; i <= end; i = i + 24 * 60 * 60 * 1000) {\n          // дата не должна входить в праздники и каникулы\n          if (!arrHolidays.includes(i) && !arrVacations.includes(i)) {\n            let date = new Date(i)\n\n            // проверка входит ли дата в массив дней недели\n            if (daysWeek.includes(date.getDay())) {\n              // значение количества уроков в день из select\n              let number = document.getElementsByName("numberOfLessons")[date.getDay() - 1].value\n              let numberValue = number.match(/\\d/g)\n\n              if (numberValue.length == 2) {\n                if (getWeek(i, start) == "odd") {\n                  sn = outputTable(numberValue[0], i, sn)\n                } else if (getWeek(i, start) == "even") {\n                  sn = outputTable(numberValue[1], i, sn)\n                }\n              } else {\n                sn= outputTable(numberValue[0], i, sn)\n              }\n            }\n          }\n        }\n      }\n\n      this.classList.remove("was-validated")\n    }\n  })\n}\n\n/* harmony default export */ const main_form_form = (form_form);\n\n;// CONCATENATED MODULE: ./src/modules/main-form/exportXLSX.js\nconst exportXLSX = () => {\n  document.getElementById("exportXLSX").addEventListener(\'click\', function() {\n    let wb = XLSX.utils.table_to_book(document.getElementById("out-table"));\n    XLSX.writeFile(wb, "calendar-plan.xlsx");\n  })\n}\n\n/* harmony default export */ const main_form_exportXLSX = (exportXLSX);\n;// CONCATENATED MODULE: ./src/index.js\n\n\n\n\n\n\n\n\nmodal_edit_vacations()\ndefault_periods()\ncount_lessons()\nmodal_count_lessons()\nmain_form_form()\nmain_form_exportXLSX()//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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Q0U7QUFDVztBQUN6Qjs7QUFFdEMsTUFBTSxTQUFJOztBQUVWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJLFdBQVc7QUFDZjs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBLFFBQVEsVUFBVTtBQUNsQjs7QUFFQTtBQUNBLDRCQUE0QixVQUFVO0FBQ3RDO0FBQ0EsZUFBZSxvQkFBb0IsUUFBUSxxQkFBcUI7QUFDaEU7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLG9CQUFvQixPQUFPO0FBQzNCLHVCQUF1QixXQUFXO0FBQ2xDLGtCQUFrQixTQUFTLE9BQU87QUFDbEMsdUJBQXVCLFdBQVc7QUFDbEM7QUFDQSxnQkFBZ0I7QUFDaEIsb0JBQW9CLFdBQVc7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBLHFEQUFlLFNBQUk7OztBQzNGbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUEsMkRBQWU7O0FDUG9EO0FBQ0g7QUFDSjtBQUNXO0FBQzVCO0FBQ1k7OztBQUd2RCxvQkFBYTtBQUNiLGVBQWM7QUFDZCxhQUFZO0FBQ1osbUJBQWlCO0FBQ2pCLGNBQUk7QUFDSixvQkFBVSIsInNvdXJjZXMiOlsid2VicGFjazovL2NhbGVuZGFyLXBsYW4vLi9zcmMvbW9kdWxlcy9mdW5jdGlvbnMuanM/NTliOSIsIndlYnBhY2s6Ly9jYWxlbmRhci1wbGFuLy4vc3JjL21vZHVsZXMvaG9saWRheXMvdmFjYXRpb25zLmpzPzdlMWMiLCJ3ZWJwYWNrOi8vY2FsZW5kYXItcGxhbi8uL3NyYy9tb2R1bGVzL2hvbGlkYXlzL3ZhY2F0aW9uLWRlbGV0ZS5qcz84YTljIiwid2VicGFjazovL2NhbGVuZGFyLXBsYW4vLi9zcmMvbW9kdWxlcy9ob2xpZGF5cy92YWNhdGlvbi1lZGl0LmpzPzU3MDQiLCJ3ZWJwYWNrOi8vY2FsZW5kYXItcGxhbi8uL3NyYy9tb2R1bGVzL2hvbGlkYXlzL3ZhY2F0aW9uLWFkZC5qcz9jZGU5Iiwid2VicGFjazovL2NhbGVuZGFyLXBsYW4vLi9zcmMvbW9kdWxlcy9ob2xpZGF5cy9tb2RhbC1lZGl0LXZhY2F0aW9ucy5qcz9lMDU4Iiwid2VicGFjazovL2NhbGVuZGFyLXBsYW4vLi9zcmMvbW9kdWxlcy9tYWluLWZvcm0vZGVmYXVsdC1wZXJpb2RzLmpzP2FkMDQiLCJ3ZWJwYWNrOi8vY2FsZW5kYXItcGxhbi8uL3NyYy9tb2R1bGVzL21haW4tZm9ybS9jb3VudC1sZXNzb25zLmpzP2UxM2QiLCJ3ZWJwYWNrOi8vY2FsZW5kYXItcGxhbi8uL3NyYy9tb2R1bGVzL21haW4tZm9ybS9tb2RhbC1jb3VudC1sZXNzb25zLmpzP2UxMjciLCJ3ZWJwYWNrOi8vY2FsZW5kYXItcGxhbi8uL3NyYy9tb2R1bGVzL2hvbGlkYXlzL2N1cnJlbnQtcGVyaW9kLmpzP2UzNjEiLCJ3ZWJwYWNrOi8vY2FsZW5kYXItcGxhbi8uL3NyYy9tb2R1bGVzL2hvbGlkYXlzL2hvbGlkYXlzLmpzPzM0MzIiLCJ3ZWJwYWNrOi8vY2FsZW5kYXItcGxhbi8uL3NyYy9tb2R1bGVzL21haW4tZm9ybS9vdXRwdXQuanM/NzMwZSIsIndlYnBhY2s6Ly9jYWxlbmRhci1wbGFuLy4vc3JjL21vZHVsZXMvbWFpbi1mb3JtL2Zvcm0uanM/MzQ0NyIsIndlYnBhY2s6Ly9jYWxlbmRhci1wbGFuLy4vc3JjL21vZHVsZXMvbWFpbi1mb3JtL2V4cG9ydFhMU1guanM/OTM5ZCIsIndlYnBhY2s6Ly9jYWxlbmRhci1wbGFuLy4vc3JjL2luZGV4LmpzP2I2MzUiXSwic291cmNlc0NvbnRlbnQiOlsiICAvLyDQv9GA0LXQvtCx0YDQsNC30L7QstCw0L3QuNC1INC00LDRgtGLINC6INCy0LjQtNGDINCU0JQu0JzQnC7Qk9CT0JPQk1xuICBleHBvcnQgY29uc3QgY29udmVydERhdGUgPSAoZGF0YSkgPT4ge1xuICAgICAgbGV0IGRhdGUgPSBuZXcgRGF0ZShkYXRhKVxuXG4gICAgICBsZXQgZGF5ID0gZGF0ZS5nZXREYXRlKClcbiAgICAgIGlmIChkYXkgPCAxMCkge1xuICAgICAgICAgIGRheSA9ICcwJyArIGRheVxuICAgICAgfVxuICAgICAgbGV0IG1vbnRoID0gZGF0ZS5nZXRNb250aCgpICsgMVxuICAgICAgaWYgKG1vbnRoIDwgMTApIHtcbiAgICAgICAgICBtb250aCA9ICcwJyArIG1vbnRoXG4gICAgICB9XG4gICAgICBsZXQgeWVhciA9IGRhdGUuZ2V0RnVsbFllYXIoKVxuXG4gICAgICByZXR1cm4gIGRheSArICcuJyArIG1vbnRoICsgJy4nICsgeWVhclxuICB9XG5cblxuICAvLyDQstGL0YfQuNGB0LvQtdC90LjQtSDQvdC+0LzQtdGA0LAg0L3QtdC00LXQu9C4ICjRh9C10YLQvdCw0Y8gLSDQvdC10YfQtdGC0L3QsNGPKVxuICBleHBvcnQgY29uc3QgZ2V0V2VlayA9IChjdXJyZW50LCBzdGFydCkgPT4ge1xuICAgICAgbGV0IGN1cnJlbnREYXRlID0gbmV3IERhdGUoY3VycmVudClcbiAgICAgIGxldCBzdGFydERhdGUgPSBuZXcgRGF0ZShzdGFydClcblxuICAgICAgbGV0IGRheU9mV2Vla09mU3RhcnREYXRlID0gc3RhcnREYXRlLmdldERheSgpXG4gICAgICBpZiAoZGF5T2ZXZWVrT2ZTdGFydERhdGUgPT0gMCkgZGF5T2ZXZWVrT2ZTdGFydERhdGUgPSA3XG5cbiAgICAgIGxldCBudW1iZXJPZkRheXMgPSBNYXRoLmZsb29yKChjdXJyZW50RGF0ZSAtIHN0YXJ0RGF0ZSkgLyAoMjQgKiA2MCAqIDYwICogMTAwMCkpICsgMVxuICAgICAgbGV0IHdlZWtOdW1iZXIgPSBNYXRoLmNlaWwoKCBudW1iZXJPZkRheXMgKyBkYXlPZldlZWtPZlN0YXJ0RGF0ZSAtIDEpIC8gNylcblxuICAgICAgcmV0dXJuIHdlZWtOdW1iZXIgJSAyID09PSAwID8gJ2V2ZW4nIDogJ29kZCdcbiAgfVxuXG5cbiAgLy8g0L/QvtC70YPRh9C10L3QuNC1INC90LDQt9Cy0LDQvdC40Y8g0LTQvdGPINC90LXQtNC10LvQuFxuICBleHBvcnQgZnVuY3Rpb24gZ2V0V2Vla0RheUFiYnIoZGF0YSkge1xuICAgICAgbGV0IGRhdGUgPSBuZXcgRGF0ZShkYXRhKVxuXG4gICAgICBsZXQgZGF5cyA9IFsn0L0nLCAn0L/QvScsICfQsicsICdjJywgJ9GHJywgJ9C/0YInLCAn0YHQsSddXG5cbiAgICAgIHJldHVybiBkYXlzW2RhdGUuZ2V0RGF5KCldXG4gIH1cblxuICAvLyDQv9C+0LvRg9GH0LXQvdC40LUg0L3QsNC30LLQsNC90LjRjyDQvNC10YHRj9GG0LBcbiAgZXhwb3J0IGNvbnN0IGdldE1vbnRoTmFtZSA9IChkYXRlKSA9PiB7XG4gICAgICBjb25zdCBtb250aHMgPSBbJ9GB0ZbRh9C90Y8nLCAn0LvRjtGC0L7Qs9C+JywgJ9Cx0LXRgNC10LfQvdGPJywgJ9C60LLRltGC0L3RjycsICfRgtGA0LDQstC90Y8nLCAn0YfQtdGA0LLQvdGPJywgJ9C70LjQv9C90Y8nLCAn0YHQtdGA0L/QvdGPJywgJ9Cy0LXRgNC10YHQvdGPJywgJ9C20L7QstGC0L3RjycsICfQu9C40YHRgtC+0L/QsNC00LAnLCAn0LPRgNGD0LTQvdGPJ11cblxuICAgICAgcmV0dXJuIG1vbnRoc1tkYXRlLmdldE1vbnRoKCldXG4gIH1cblxuIiwiaW1wb3J0IHsgY29udmVydERhdGUgfSBmcm9tIFwiLi4vZnVuY3Rpb25zXCJcblxuY29uc3QgdmFjYXRpb25zID0gW1xuICB7XG4gICAgbmFtZTogXCJmYWxsXCIsXG4gICAgc3RhcnREYXRlOiBcIjIwMjItMTAtMjJcIixcbiAgICBlbmREYXRlOiBcIjIwMjItMTAtMzBcIixcbiAgICBkYXRlczogW10sXG4gIH0sXG4gIHtcbiAgICBuYW1lOiBcIndpbnRlclwiLFxuICAgIHN0YXJ0RGF0ZTogXCIyMDIyLTEyLTI0XCIsXG4gICAgZW5kRGF0ZTogXCIyMDIzLTAxLTA4XCIsXG4gICAgZGF0ZXM6IFtdLFxuICB9LFxuICB7XG4gICAgbmFtZTogXCJzcHJpbmdcIixcbiAgICBzdGFydERhdGU6IFwiMjAyMy0wMy0yNVwiLFxuICAgIGVuZERhdGU6IFwiMjAyMy0wNC0wMlwiLFxuICAgIGRhdGVzOiBbXSxcbiAgfSxcbl1cblxuLy8g0LfQsNC/0L7Qu9C90LXQvdC40LUg0LzQsNGB0YHQuNCy0LAg0LTQsNGCINC00LvRjyDQvtC/0YDQtdC00LXQu9C10L3QvdGL0YUg0LrQsNC90LjQutGD0LtcbmNvbnN0IGNyZWF0ZUFycmF5RGF0ZXMgPSAodmFjYXRpb25OYW1lKSA9PiB7XG4gIGxldCBmb3VuZFZhY2F0aW9uID0gdmFjYXRpb25zLmZpbmQoKGl0ZW0pID0+IGl0ZW0ubmFtZSA9PSB2YWNhdGlvbk5hbWUpXG4gIGZvdW5kVmFjYXRpb24uZGF0ZXMgPSBbXVxuICBmb3IgKGxldCBpID0gRGF0ZS5wYXJzZShmb3VuZFZhY2F0aW9uLnN0YXJ0RGF0ZSk7IGkgPD0gRGF0ZS5wYXJzZShmb3VuZFZhY2F0aW9uLmVuZERhdGUpO2kgPSBpICsgMTAwMCAqIDM2MDAgKiAyNFxuICApIHtcbiAgICBmb3VuZFZhY2F0aW9uLmRhdGVzLnB1c2goaSlcbiAgfVxufVxuXG5jcmVhdGVBcnJheURhdGVzKFwiZmFsbFwiKVxuY3JlYXRlQXJyYXlEYXRlcyhcIndpbnRlclwiKVxuY3JlYXRlQXJyYXlEYXRlcyhcInNwcmluZ1wiKVxuXG4vLz09PT09INCk0L7RgNC80LjRgNC+0LLQsNC90LjQtSDQvNCw0YHRgdC40LLQsCDQtNCw0YIg0LLRgdC10YUg0LrQsNC90LjQutGD0LsgPT09PT09PT09PT1cbmxldCBhcnJWYWNhdGlvbnMgPSBbXVxuY29uc3QgY3JlYXRlQXJyVmFjYXRpb25zID0gKCkgPT4ge1xuICBhcnJWYWNhdGlvbnMgPSBbXVxuICB2YWNhdGlvbnMuZm9yRWFjaCgoaXRlbSkgPT4ge1xuICAgIGFyclZhY2F0aW9ucyA9IGFyclZhY2F0aW9ucy5jb25jYXQoaXRlbS5kYXRlcylcbiAgfSlcbn1cblxuY3JlYXRlQXJyVmFjYXRpb25zKClcblxuLy8g0LLRi9Cw0L7QtCDQutCw0L3QuNC60YPQuyDQvdCwINGB0YLRgNCw0L3QuNGG0LVcbmZvciAobGV0IGl0ZW0gb2YgdmFjYXRpb25zKSB7XG4gIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwidmFjYXRpb25zXCIpLmlubmVySFRNTCArPSBgXG4gICAgICAgIDxkaXYgY2xhc3M9XCJkLWZsZXgganVzdGlmeS1jb250ZW50LWJldHdlZW4gYWxpZ24taXRlbXMtY2VudGVyIG1iLTJcIj5cbiAgICAgICAgICAgIDxkaXY+0LcgPHNwYW4+JHtjb252ZXJ0RGF0ZShpdGVtLnN0YXJ0RGF0ZSl9PC9zcGFuPiDQtNC+IDxzcGFuPiR7Y29udmVydERhdGUoaXRlbS5lbmREYXRlKX08L3NwYW4+IDwvZGl2PlxuICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cImJ0biBidG4tcHJpbWFyeVwiIG5hbWU9XCJidG5FZGl0VmFjYXRpb25cIiBkYXRhLXZhY2F0aW9uLW5hbWU9JyR7aXRlbS5uYW1lfScgZGF0YS1icy10b2dnbGU9XCJtb2RhbFwiIGRhdGEtYnMtdGFyZ2V0PVwiI21vZGFsRWRpdFZhY2F0aW9uRGF0ZXNcIj5cbiAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9XCJiaSBiaS1wZW5jaWwtc3F1YXJlXCI+PC9pPlxuICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwiYnRuIGJ0bi1wcmltYXJ5XCIgbmFtZT1cImJ0bkRlbGV0ZVZhY2F0aW9uXCIgZGF0YS12YWNhdGlvbi1uYW1lPScke2l0ZW0ubmFtZX0nIGRhdGEtYnMtdG9nZ2xlPVwibW9kYWxcIiBkYXRhLWJzLXRhcmdldD1cIiNtb2RhbERlbGV0ZVZhY2F0aW9uXCI+XG4gICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPVwiYmkgYmkteC1zcXVhcmVcIj48L2k+XG4gICAgICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgYFxufVxuXG5leHBvcnQgeyB2YWNhdGlvbnMsIGFyclZhY2F0aW9ucywgY3JlYXRlQXJyYXlEYXRlcywgY3JlYXRlQXJyVmFjYXRpb25zIH0iLCJpbXBvcnQgeyB2YWNhdGlvbnMsIGNyZWF0ZUFyclZhY2F0aW9ucyB9IGZyb20gXCIuL3ZhY2F0aW9uc1wiXG5cbmxldCB2YWNhdGlvbk5hbWVcbmxldCBkaXZWYWNhdGlvblxuXG5jb25zdCBjbGlja0J0bkRlbGV0ZVZhY2F0aW9uID0gKCkgPT4ge1xuICBmb3IgKGxldCBidG4gb2YgZG9jdW1lbnQuZ2V0RWxlbWVudHNCeU5hbWUoXCJidG5EZWxldGVWYWNhdGlvblwiKSkge1xuICAgIGJ0bi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xuICAgICAgdmFjYXRpb25OYW1lID0gYnRuLmRhdGFzZXQudmFjYXRpb25OYW1lXG4gICAgICBkaXZWYWNhdGlvbiA9IGJ0bi5wYXJlbnRFbGVtZW50LnBhcmVudEVsZW1lbnRcbiAgICB9KVxuICB9XG59XG5jbGlja0J0bkRlbGV0ZVZhY2F0aW9uKClcblxuY29uc3QgZGVsZXRlVmFjYXRpb24gPSAodmFjYXRpb25OYW1lKSA9PiB7XG4gIGxldCBmb3VuZFZhY2F0aW9uID0gdmFjYXRpb25zLmZpbmRJbmRleCgoaXRlbSkgPT4gaXRlbS5uYW1lID09IHZhY2F0aW9uTmFtZSlcbiAgdmFjYXRpb25zLnNwbGljZShmb3VuZFZhY2F0aW9uLCAxKVxuICBkaXZWYWNhdGlvbi5yZW1vdmUoKVxufVxuXG5kb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImJ0bkNvbmZpcm1EZWxldGVWYWNhdGlvblwiKS5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xuICAgIGRlbGV0ZVZhY2F0aW9uKHZhY2F0aW9uTmFtZSlcbiAgICBjcmVhdGVBcnJWYWNhdGlvbnMoKVxuICB9KVxuXG5leHBvcnQgeyBjbGlja0J0bkRlbGV0ZVZhY2F0aW9uIH1cbiIsImltcG9ydCB7IHZhY2F0aW9ucywgY3JlYXRlQXJyYXlEYXRlcywgY3JlYXRlQXJyVmFjYXRpb25zIH0gZnJvbSBcIi4vdmFjYXRpb25zXCJcbmltcG9ydCB7IGNvbnZlcnREYXRlIH0gZnJvbSBcIi4uL2Z1bmN0aW9uc1wiXG5cbmV4cG9ydCBjb25zdCBlZGl0VmFjYXRpb25EYXRlcyA9ICh2YWNhdGlvbk5hbWUsIHN0YXJ0RGF0ZSwgZW5kRGF0ZSwgZGlzcGxheVZhY2F0aW9uU3RhcnREYXRlLCBkaXNwbGF5VmFjYXRpb25FbmREYXRlKSA9PiB7XG4gICAgbGV0IGZvdW5kVmFjYXRpb24gPSB2YWNhdGlvbnMuZmluZChpdGVtID0+IGl0ZW0ubmFtZSA9PSB2YWNhdGlvbk5hbWUpXG4gICAgZm91bmRWYWNhdGlvbi5zdGFydERhdGUgPSBzdGFydERhdGVcbiAgICBmb3VuZFZhY2F0aW9uLmVuZERhdGUgPSBlbmREYXRlXG4gICAgZGlzcGxheVZhY2F0aW9uU3RhcnREYXRlLmlubmVyVGV4dCA9IGNvbnZlcnREYXRlKHN0YXJ0RGF0ZSlcbiAgICBkaXNwbGF5VmFjYXRpb25FbmREYXRlLmlubmVyVGV4dCA9IGNvbnZlcnREYXRlKGVuZERhdGUpXG4gICAgY3JlYXRlQXJyYXlEYXRlcyh2YWNhdGlvbk5hbWUpXG4gICAgY3JlYXRlQXJyVmFjYXRpb25zKClcbn0iLCJpbXBvcnQgeyBjb252ZXJ0RGF0ZSB9IGZyb20gXCIuLi9mdW5jdGlvbnNcIlxuaW1wb3J0IHsgdmFjYXRpb25zLCBjcmVhdGVBcnJheURhdGVzLCBjcmVhdGVBcnJWYWNhdGlvbnMgfSBmcm9tIFwiLi92YWNhdGlvbnNcIlxuXG5leHBvcnQgY29uc3QgYWRkTmV3VmFjYXRpb24gPSAodmFjYXRpb25OYW1lLCBzdGFydERhdGUsIGVuZERhdGUpID0+IHtcblxuICAgIHZhY2F0aW9ucy5wdXNoKHtcbiAgICAgICAgbmFtZTogdmFjYXRpb25OYW1lLFxuICAgICAgICBzdGFydERhdGU6IHN0YXJ0RGF0ZSxcbiAgICAgICAgZW5kRGF0ZTogZW5kRGF0ZSxcbiAgICAgICAgZGF0ZXM6IFtdXG4gICAgfSlcblxuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd2YWNhdGlvbnMnKS5pbm5lckhUTUwgKz0gYFxuICAgICAgICA8ZGl2IGNsYXNzPVwiZC1mbGV4IGp1c3RpZnktY29udGVudC1iZXR3ZWVuIGFsaWduLWl0ZW1zLWNlbnRlciBtYi0yXCI+XG4gICAgICAgICAgICA8ZGl2PtC3IDxzcGFuPiR7Y29udmVydERhdGUoc3RhcnREYXRlKX08L3NwYW4+INC00L4gPHNwYW4+JHtjb252ZXJ0RGF0ZShlbmREYXRlKX08L3NwYW4+IDwvZGl2PlxuICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cImJ0biBidG4tcHJpbWFyeVwiIG5hbWU9XCJidG5FZGl0VmFjYXRpb25cIiBkYXRhLXZhY2F0aW9uLW5hbWU9JyR7dmFjYXRpb25OYW1lfScgZGF0YS1icy10b2dnbGU9XCJtb2RhbFwiIGRhdGEtYnMtdGFyZ2V0PVwiI21vZGFsRWRpdFZhY2F0aW9uRGF0ZXNcIj5cbiAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9XCJiaSBiaS1wZW5jaWwtc3F1YXJlXCI+PC9pPlxuICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwiYnRuIGJ0bi1wcmltYXJ5XCIgbmFtZT1cImJ0bkRlbGV0ZVZhY2F0aW9uXCIgZGF0YS12YWNhdGlvbi1uYW1lPScke3ZhY2F0aW9uTmFtZX0nIGRhdGEtYnMtdG9nZ2xlPVwibW9kYWxcIiBkYXRhLWJzLXRhcmdldD1cIiNtb2RhbERlbGV0ZVZhY2F0aW9uXCI+XG4gICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPVwiYmkgYmkteC1zcXVhcmVcIj48L2k+XG4gICAgICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgYFxuICAgIGNyZWF0ZUFycmF5RGF0ZXModmFjYXRpb25OYW1lKVxuICAgIGNyZWF0ZUFyclZhY2F0aW9ucygpXG59IiwiaW1wb3J0IHsgdmFjYXRpb25zLCBjcmVhdGVBcnJheURhdGVzLCBjcmVhdGVBcnJWYWNhdGlvbnMgfSBmcm9tIFwiLi92YWNhdGlvbnNcIlxuaW1wb3J0IHsgY2xpY2tCdG5EZWxldGVWYWNhdGlvbiB9IGZyb20gXCIuL3ZhY2F0aW9uLWRlbGV0ZVwiXG5pbXBvcnQgeyBlZGl0VmFjYXRpb25EYXRlcyB9IGZyb20gXCIuL3ZhY2F0aW9uLWVkaXRcIlxuaW1wb3J0IHsgYWRkTmV3VmFjYXRpb24gfSBmcm9tIFwiLi92YWNhdGlvbi1hZGRcIlxuXG5jb25zdCBlZGl0VmFjYXRpb25zID0gKCkgPT4ge1xuICBjb25zdCBtb2RhbEVkaXRWYWNhdGlvbkRhdGVzID0gbmV3IGJvb3RzdHJhcC5Nb2RhbChcIiNtb2RhbEVkaXRWYWNhdGlvbkRhdGVzXCIpXG4gIGNvbnN0IGZvcm1FZGl0VmFjYXRpb25EYXRlcyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiZm9ybUVkaXRWYWNhdGlvbkRhdGVzXCIpXG5cbiAgbGV0IHZhY2F0aW9uTmFtZVxuICBsZXQgbmV3VmFjYXRpb25OYW1lID0gMFxuICBsZXQgZGlzcGxheVZhY2F0aW9uU3RhcnREYXRlXG4gIGxldCBkaXNwbGF5VmFjYXRpb25FbmREYXRlXG4gIGxldCBmbGFnXG5cbiAgY29uc3QgY2xpY2tCdG5FZGl0VmFjYXRpb24gPSAoKSA9PiB7XG4gICAgZm9yIChsZXQgYnRuIG9mIGRvY3VtZW50LmdldEVsZW1lbnRzQnlOYW1lKFwiYnRuRWRpdFZhY2F0aW9uXCIpKSB7XG4gICAgICBidG4uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcbiAgICAgICAgZmxhZyA9IFwiZWRpdFwiXG4gICAgICAgIHZhY2F0aW9uTmFtZSA9IGJ0bi5kYXRhc2V0LnZhY2F0aW9uTmFtZVxuICAgICAgICBkaXNwbGF5VmFjYXRpb25TdGFydERhdGUgPSBidG4ucGFyZW50RWxlbWVudC5wcmV2aW91c0VsZW1lbnRTaWJsaW5nLmZpcnN0RWxlbWVudENoaWxkXG4gICAgICAgIGRpc3BsYXlWYWNhdGlvbkVuZERhdGUgPSBidG4ucGFyZW50RWxlbWVudC5wcmV2aW91c0VsZW1lbnRTaWJsaW5nLmxhc3RFbGVtZW50Q2hpbGRcblxuICAgICAgICBsZXQgZm91bmRWYWNhdGlvbiA9IHZhY2F0aW9ucy5maW5kKChpdGVtKSA9PiBpdGVtLm5hbWUgPT0gdmFjYXRpb25OYW1lKVxuICAgICAgICBmb3JtRWRpdFZhY2F0aW9uRGF0ZXNbMF0udmFsdWUgPSBmb3VuZFZhY2F0aW9uLnN0YXJ0RGF0ZVxuICAgICAgICBmb3JtRWRpdFZhY2F0aW9uRGF0ZXNbMV0udmFsdWUgPSBmb3VuZFZhY2F0aW9uLmVuZERhdGVcbiAgICAgIH0pXG4gICAgfVxuICB9XG4gIGNsaWNrQnRuRWRpdFZhY2F0aW9uKClcblxuICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImJ0bkFkZFZhY2F0aW9uXCIpLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XG4gICAgZmxhZyA9IFwiYWRkXCJcbiAgICBuZXdWYWNhdGlvbk5hbWUgKytcbiAgICB2YWNhdGlvbk5hbWUgPSBuZXdWYWNhdGlvbk5hbWVcbiAgfSlcblxuICAvLyDQtNC10LnRgdGC0LLQuNGPINC/0YDQuCDQt9Cw0LrRgNGL0YLQuNC4INC80L7QtNCw0LvRjNC90L7Qs9C+INC+0LrQvdCwINCx0LXQtyDRgdC+0YXRgNCw0L3QtdC90LjRjyDQuNC30LzQtdC90LXQvdC40LlcbiAgbW9kYWxFZGl0VmFjYXRpb25EYXRlcy5fZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwiaGlkZGVuLmJzLm1vZGFsXCIsIChlKSA9PiB7XG4gICAgZm9ybUVkaXRWYWNhdGlvbkRhdGVzLnJlc2V0KClcbiAgICBmb3JtRWRpdFZhY2F0aW9uRGF0ZXMuY2xhc3NMaXN0LnJlbW92ZShcIndhcy12YWxpZGF0ZWRcIilcbiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnZhbGlkYXRpb25SYW5nZVwiKS5jbGFzc0xpc3QuYWRkKFwiZC1ub25lXCIpXG4gICAgZm9yIChsZXQgaXRlbSBvZiBmb3JtRWRpdFZhY2F0aW9uRGF0ZXMuaW5wdXRWYWNhdGlvbkRhdGUpIHtcbiAgICAgIGl0ZW0uY2xhc3NMaXN0LnJlbW92ZShcImlzLWludmFsaWRcIilcbiAgICAgIGl0ZW0uY2xhc3NMaXN0LnJlbW92ZShcImlzLXZhbGlkXCIpXG4gICAgfVxuICB9KVxuXG4gIC8vINC/0YDQvtCy0LXRgNC60LAg0LLQstC+0LTQsCDQv9GA0LDQstC40LvRjNC90L7Qs9C+INC00LjQsNC/0LDQt9C+0L3QsCDQtNCw0YJcbiAgbGV0IHZhbGlkYXRpb25SYW5nZSA9IHRydWVcbiAgZm9yIChsZXQgaXRlbSBvZiBmb3JtRWRpdFZhY2F0aW9uRGF0ZXMuaW5wdXRWYWNhdGlvbkRhdGUpIHtcbiAgICBpdGVtLmFkZEV2ZW50TGlzdGVuZXIoXCJjaGFuZ2VcIiwgKCkgPT4ge1xuICAgICAgaWYgKGZvcm1FZGl0VmFjYXRpb25EYXRlc1swXS52YWx1ZSAhPSBcIlwiICYmIGZvcm1FZGl0VmFjYXRpb25EYXRlc1sxXS52YWx1ZSAhPSBcIlwiKSB7XG4gICAgICAgIGlmIChmb3JtRWRpdFZhY2F0aW9uRGF0ZXNbMF0udmFsdWUgPiBmb3JtRWRpdFZhY2F0aW9uRGF0ZXNbMV0udmFsdWUpIHtcbiAgICAgICAgICBmb3JtRWRpdFZhY2F0aW9uRGF0ZXMuY2xhc3NMaXN0LnJlbW92ZShcIndhcy12YWxpZGF0ZWRcIilcbiAgICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnZhbGlkYXRpb25SYW5nZVwiKS5jbGFzc0xpc3QucmVtb3ZlKFwiZC1ub25lXCIpXG4gICAgICAgICAgZm9ybUVkaXRWYWNhdGlvbkRhdGVzWzBdLmNsYXNzTGlzdC5yZW1vdmUoXCJpcy12YWxpZFwiKVxuICAgICAgICAgIGZvcm1FZGl0VmFjYXRpb25EYXRlc1sxXS5jbGFzc0xpc3QucmVtb3ZlKFwiaXMtdmFsaWRcIilcbiAgICAgICAgICBmb3JtRWRpdFZhY2F0aW9uRGF0ZXNbMF0uY2xhc3NMaXN0LmFkZChcImlzLWludmFsaWRcIilcbiAgICAgICAgICBmb3JtRWRpdFZhY2F0aW9uRGF0ZXNbMV0uY2xhc3NMaXN0LmFkZChcImlzLWludmFsaWRcIilcbiAgICAgICAgICB2YWxpZGF0aW9uUmFuZ2UgPSBmYWxzZVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIudmFsaWRhdGlvblJhbmdlXCIpLmNsYXNzTGlzdC5hZGQoXCJkLW5vbmVcIilcbiAgICAgICAgICBmb3JtRWRpdFZhY2F0aW9uRGF0ZXNbMF0uY2xhc3NMaXN0LnJlbW92ZShcImlzLWludmFsaWRcIilcbiAgICAgICAgICBmb3JtRWRpdFZhY2F0aW9uRGF0ZXNbMV0uY2xhc3NMaXN0LnJlbW92ZShcImlzLWludmFsaWRcIilcbiAgICAgICAgICBmb3JtRWRpdFZhY2F0aW9uRGF0ZXNbMF0uY2xhc3NMaXN0LmFkZChcImlzLXZhbGlkXCIpXG4gICAgICAgICAgZm9ybUVkaXRWYWNhdGlvbkRhdGVzWzFdLmNsYXNzTGlzdC5hZGQoXCJpcy12YWxpZFwiKVxuICAgICAgICAgIHZhbGlkYXRpb25SYW5nZSA9IHRydWVcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pXG4gIH1cblxuICAvLyDQvtCx0YDQsNCx0L7RgtC60LAg0YTQvtGA0LzRiyDQuNC30LzQtdC90LXQvdC40Y8g0L3QvtCy0YvRhSDQtNCw0YIg0LrQsNC90LjQutGD0LtcbiAgZm9ybUVkaXRWYWNhdGlvbkRhdGVzLmFkZEV2ZW50TGlzdGVuZXIoXCJzdWJtaXRcIiwgZnVuY3Rpb24gKGUpIHtcbiAgICBlLnByZXZlbnREZWZhdWx0KClcblxuICAgIGlmICh2YWxpZGF0aW9uUmFuZ2UgPT0gdHJ1ZSkge1xuICAgICAgdGhpcy5jbGFzc0xpc3QuYWRkKFwid2FzLXZhbGlkYXRlZFwiKVxuICAgICAgaWYgKHRoaXMuY2hlY2tWYWxpZGl0eSgpKSB7XG4gICAgICAgIGxldCBzdGFydERhdGUgPSB0aGlzWzBdLnZhbHVlXG4gICAgICAgIGxldCBlbmREYXRlID0gdGhpc1sxXS52YWx1ZVxuXG4gICAgICAgIGlmIChmbGFnID09IFwiYWRkXCIpIHtcbiAgICAgICAgICBhZGROZXdWYWNhdGlvbih2YWNhdGlvbk5hbWUsIHN0YXJ0RGF0ZSwgZW5kRGF0ZSlcbiAgICAgICAgICBjbGlja0J0bkVkaXRWYWNhdGlvbigpXG4gICAgICAgICAgY2xpY2tCdG5EZWxldGVWYWNhdGlvbigpXG4gICAgICAgIH0gZWxzZSBpZiAoZmxhZyA9PSBcImVkaXRcIikge1xuICAgICAgICAgIGVkaXRWYWNhdGlvbkRhdGVzKHZhY2F0aW9uTmFtZSwgc3RhcnREYXRlLCBlbmREYXRlLCBkaXNwbGF5VmFjYXRpb25TdGFydERhdGUsIGRpc3BsYXlWYWNhdGlvbkVuZERhdGVcbiAgICAgICAgICApXG4gICAgICAgIH1cblxuICAgICAgICBtb2RhbEVkaXRWYWNhdGlvbkRhdGVzLmhpZGUoKVxuICAgICAgICB0aGlzLmNsYXNzTGlzdC5yZW1vdmUoXCJ3YXMtdmFsaWRhdGVkXCIpXG4gICAgICAgIHRoaXMucmVzZXQoKVxuICAgICAgfVxuICAgIH1cbiAgfSlcbn1cblxuZXhwb3J0IGRlZmF1bHQgZWRpdFZhY2F0aW9uc1xuIiwiY29uc3QgZGVmYXVsdFBlcmlvZHMgPSAoKSA9PiB7XG4gIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiYnRuRmlyc3RTZW1lc3RlclwiKS5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwic3RhcnQtZGF0ZVwiKS52YWx1ZSA9IFwiMjAyMi0wOS0wMVwiXG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJlbmQtZGF0ZVwiKS52YWx1ZSA9IFwiMjAyMi0xMi0yM1wiXG4gIH0pXG5cbiAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJidG5TZWNvbmRTZW1lc3RlclwiKS5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwic3RhcnQtZGF0ZVwiKS52YWx1ZSA9IFwiMjAyMy0wMS0wOVwiXG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJlbmQtZGF0ZVwiKS52YWx1ZSA9IFwiMjAyMy0wNi0zMFwiXG4gIH0pXG59XG5cbmV4cG9ydCBkZWZhdWx0IGRlZmF1bHRQZXJpb2RzIiwiY29uc3QgY291bnRMZXNzb25zID0gKCkgPT4ge1xuICBjb25zdCBudW1iZXJPZkxlc3NvbnMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5TmFtZShcIm51bWJlck9mTGVzc29uc1wiKVxuXG4gIGRvY3VtZW50LmdldEVsZW1lbnRzQnlOYW1lKFwiZGF5XCIpLmZvckVhY2goKGl0ZW0sIGluZGV4KSA9PiB7XG4gICAgaXRlbS5hZGRFdmVudExpc3RlbmVyKFwiY2hhbmdlXCIsICgpID0+IHtcbiAgICAgIGlmIChudW1iZXJPZkxlc3NvbnNbaW5kZXhdLmhhc0F0dHJpYnV0ZShcImRpc2FibGVkXCIpKSB7XG4gICAgICAgIG51bWJlck9mTGVzc29uc1tpbmRleF0ucmVtb3ZlQXR0cmlidXRlKFwiZGlzYWJsZWRcIilcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG51bWJlck9mTGVzc29uc1tpbmRleF0uc2V0QXR0cmlidXRlKFwiZGlzYWJsZWRcIiwgXCJkaXNhYmxlZFwiKVxuICAgICAgfVxuXG4gICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZmVlZGJhY2tDaGVja2JveCcpLmNsYXNzTGlzdC5hZGQoXCJkLW5vbmVcIilcbiAgICB9KVxuICB9KVxufVxuXG5leHBvcnQgZGVmYXVsdCBjb3VudExlc3NvbnMiLCJjb25zdCBtb2RhbENvdW50TGVzc29ucyA9ICgpID0+IHtcbiAgY29uc3QgbW9kYWxOdW1iZXJPZkxlc3NvbnMgPSBuZXcgYm9vdHN0cmFwLk1vZGFsKFwiI21vZGFsTnVtYmVyT2ZMZXNzb25zXCIpXG4gIGNvbnN0IHNlbGVjdHNOdW1iZXJPZkxlc3NvbnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLnNlbGVjdE51bWJlck9mTGVzc29uc1wiKVxuICBjb25zdCBpbnB1dHNOdW1kZXJPZkxlc3NvbnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLmlucHV0TnVtZGVyT2ZMZXNzb25zXCIpXG4gIGNvbnN0IGlucHV0c1JhZGlvV2VlayA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlOYW1lKFwicmFkaW9XZWVrXCIpXG4gIGNvbnN0IGlucHV0RXZlcnlXZWVrID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJpbnB1dEV2ZXJ5V2Vla1wiKVxuICBjb25zdCBpbnB1dE9kZFdlZWtzID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJpbnB1dE9kZFdlZWtzXCIpXG4gIGNvbnN0IGlucHV0RXZlbldlZWtzID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJpbnB1dEV2ZW5XZWVrc1wiKVxuICBjb25zdCBmb3JtQ2hhbmdlTnVtYmVyID0gZG9jdW1lbnQuZm9ybXMuY2hhbmdlTnVtYmVyT2ZMZXNzb25zXG5cbiAgbGV0IHdlZWtEYXlcblxuICAvLyDQstGL0LfQvtCyINC80L7QtNCw0LvRjNC90L7Qs9C+INC+0LrQvdCwINCy0LLQvtC00LAg0LrQvtC70LjRh9C10YHRgtCy0LAg0YPRgNC+0LrQvtCyXG4gIHNlbGVjdHNOdW1iZXJPZkxlc3NvbnMuZm9yRWFjaCgoaXRlbSwgaW5kZXgpID0+IHtcbiAgICBpdGVtLmFkZEV2ZW50TGlzdGVuZXIoXCJjaGFuZ2VcIiwgKCkgPT4ge1xuICAgICAgaWYgKGl0ZW0udmFsdWUgPT0gXCJvdGhlclwiKSB7XG4gICAgICAgIG1vZGFsTnVtYmVyT2ZMZXNzb25zLnNob3coKVxuICAgICAgICB3ZWVrRGF5ID0gaW5kZXhcbiAgICAgIH1cbiAgICB9KVxuICB9KVxuXG4gIC8vINC00LXQudGB0YLQstC40Y8g0L/RgNC4INC30LDQutGA0YvRgtC40Lgg0LzQvtC00LDQu9GM0L3QvtCz0L4g0L7QutC90LAg0LHQtdC3INGB0L7RhdGA0LDQvdC10L3QuNGPINC40LfQvNC10L3QtdC90LjQuVxuICBtb2RhbE51bWJlck9mTGVzc29ucy5fZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwiaGlkZGVuLmJzLm1vZGFsXCIsIChlKSA9PiB7XG4gICAgZm9ybUNoYW5nZU51bWJlci5yZXNldCgpXG4gICAgZm9ybUNoYW5nZU51bWJlci5jbGFzc0xpc3QucmVtb3ZlKFwid2FzLXZhbGlkYXRlZFwiKVxuXG4gICAgZm9yIChsZXQgZWxlbSBvZiBpbnB1dHNOdW1kZXJPZkxlc3NvbnMpIHtcbiAgICAgIGVsZW0uc2V0QXR0cmlidXRlKFwiZGlzYWJsZWRcIiwgXCJkaXNhYmxlZFwiKVxuICAgIH1cblxuICAgIGlmIChzZWxlY3RzTnVtYmVyT2ZMZXNzb25zW3dlZWtEYXldLnZhbHVlID09IFwib3RoZXJcIikge1xuICAgICAgc2VsZWN0c051bWJlck9mTGVzc29uc1t3ZWVrRGF5XS52YWx1ZSA9IFwiMVwiXG4gICAgfVxuICB9KVxuXG4gIC8vINCw0LrRgtC40LLQsNGG0LjRjy/QtNC10LDQutGC0LjQstCw0YbQuNGPINC/0L7Qu9C10Lkg0LLQstC+0LTQsCDQutC+0LvQuNGH0LXRgdGC0LLQsCDRg9GA0L7QutC+0LJcbiAgZm9yIChsZXQgbm9kZSBvZiBpbnB1dHNSYWRpb1dlZWspIHtcbiAgICBub2RlLmFkZEV2ZW50TGlzdGVuZXIoXCJjaGFuZ2VcIiwgKCkgPT4ge1xuICAgICAgZm9yIChsZXQgZWxlbSBvZiBpbnB1dHNOdW1kZXJPZkxlc3NvbnMpIHtcbiAgICAgICAgZWxlbS5zZXRBdHRyaWJ1dGUoXCJkaXNhYmxlZFwiLCBcImRpc2FibGVkXCIpXG4gICAgICAgIGVsZW0udmFsdWUgPSBcIlwiXG4gICAgICB9XG4gICAgICBmb3IgKGxldCBlbGVtIG9mIG5vZGUucGFyZW50RWxlbWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcIipcIikpIHtcbiAgICAgICAgaWYgKGVsZW0uY2xhc3NMaXN0LmNvbnRhaW5zKFwiaW5wdXROdW1kZXJPZkxlc3NvbnNcIikpIHtcbiAgICAgICAgICBlbGVtLnJlbW92ZUF0dHJpYnV0ZShcImRpc2FibGVkXCIpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KVxuICB9XG5cbiAgLy8g0L/QvtC00YHRgtCw0LLQu9C10L3QuNC1IDAg0LIg0L/QvtC70LUg0L/RgNC4INC30LDQv9C+0LvQvdC10L3QuNC4INGC0L7Qu9GM0LrQviDRh9C10YLQvdC+0LPQvi/QvdC10YfQtdGC0L3QvtCz0L4g0L/QvtC70Y9cbiAgZm9ybUNoYW5nZU51bWJlci5pbldlZWsuZm9yRWFjaCgoaXRlbSwgaW5kZXgpID0+IHtcbiAgICBpdGVtLmFkZEV2ZW50TGlzdGVuZXIoXCJpbnB1dFwiLCAoKSA9PiB7XG4gICAgICBmb3JtQ2hhbmdlTnVtYmVyLmluV2Vlay5mb3JFYWNoKChpdCwgaW5kKSA9PiB7XG4gICAgICAgIGlmIChpbmQgIT0gaW5kZXggJiYgaXQudmFsdWUgPT0gXCJcIikge1xuICAgICAgICAgIGl0LnZhbHVlID0gXCIwXCJcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9KVxuICB9KVxuXG4gIC8vINC+0LHRgNCw0LHQvtGC0LrQsCDQtNCw0L3QvdGL0YUg0L/QvtC70LXQuSDQstCy0L7QtNCwINC60L7Qu9C40YfQtdGB0YLQstCwINGD0YDQvtC60L7QslxuICBmb3JtQ2hhbmdlTnVtYmVyLmFkZEV2ZW50TGlzdGVuZXIoXCJzdWJtaXRcIiwgZnVuY3Rpb24oZSkge1xuICAgIGUucHJldmVudERlZmF1bHQoKVxuICAgIHRoaXMuY2xhc3NMaXN0LmFkZChcIndhcy12YWxpZGF0ZWRcIilcblxuICAgIGlmICh0aGlzLmNoZWNrVmFsaWRpdHkoKSkge1xuICAgICAgLy8g0LTQvtCx0LDQstC70LXQvdC40LUg0L3QvtCy0L7Qs9C+INGN0LvQtdC80LXQvdGC0LAgb3B0aW9uINCyINC30LDQstC40YHQuNC80L7RgdGC0Lgg0L7RgiDQstGL0LHQvtGA0LBcbiAgICAgIGxldCBvcHRpb25cbiAgICAgIGZvciAobGV0IG5vZGUgb2YgaW5wdXRzUmFkaW9XZWVrKSB7XG4gICAgICAgIGlmIChub2RlLmNoZWNrZWQgJiYgbm9kZS5pZCA9PSBcInJhZGlvRXZlcnlXZWVrXCIpIHtcbiAgICAgICAgICBvcHRpb24gPSBuZXcgT3B0aW9uKFxuICAgICAgICAgICAgaW5wdXRFdmVyeVdlZWsudmFsdWUsXG4gICAgICAgICAgICBpbnB1dEV2ZXJ5V2Vlay52YWx1ZSxcbiAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgdHJ1ZVxuICAgICAgICAgIClcbiAgICAgICAgfSBlbHNlIGlmIChub2RlLmNoZWNrZWQgJiYgbm9kZS5pZCA9PSBcInJhZGlvSW5BV2Vla1wiKSB7XG4gICAgICAgICAgb3B0aW9uID0gbmV3IE9wdGlvbihcbiAgICAgICAgICAgIGlucHV0T2RkV2Vla3MudmFsdWUgKyBcIi9cIiArIGlucHV0RXZlbldlZWtzLnZhbHVlLFxuICAgICAgICAgICAgaW5wdXRPZGRXZWVrcy52YWx1ZSArIFwiL1wiICsgaW5wdXRFdmVuV2Vla3MudmFsdWUsXG4gICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgIHRydWVcbiAgICAgICAgICApXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIC8vINC/0YDQvtCy0LXRgNC60LAg0L3QtSDQtNGD0LHQu9C40YDRg9C10YLRgdGPINC70Lggb3B0aW9uXG4gICAgICBsZXQgbiA9IDBcbiAgICAgIGZvciAobGV0IGVsZW0gb2Ygc2VsZWN0c051bWJlck9mTGVzc29uc1t3ZWVrRGF5XS5vcHRpb25zKSB7XG4gICAgICAgIGlmIChlbGVtLnZhbHVlID09IG9wdGlvbi52YWx1ZSkge1xuICAgICAgICAgIG4rK1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAobiA9PSAwKSB7XG4gICAgICAgIHNlbGVjdHNOdW1iZXJPZkxlc3NvbnNbd2Vla0RheV0ucHJlcGVuZChvcHRpb24pXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzZWxlY3RzTnVtYmVyT2ZMZXNzb25zW3dlZWtEYXldLnZhbHVlID0gb3B0aW9uLnZhbHVlXG4gICAgICB9XG5cbiAgICAgIG1vZGFsTnVtYmVyT2ZMZXNzb25zLmhpZGUoKVxuICAgIH1cbiAgfSlcbn1cblxuZXhwb3J0IGRlZmF1bHQgbW9kYWxDb3VudExlc3NvbnMiLCJjb25zdCBub3cgPSBuZXcgRGF0ZSgpXG5cbmxldCBmaXJzdFNlbWVzdGVyWWVhclxubGV0IHNlY29uZFNlbWVzdGVyWWVhclxuXG5pZiAobm93LmdldE1vbnRoKCkgPj0gMCAmJiBub3cuZ2V0TW9udGgoKSA8IDYpIHtcbiAgZmlyc3RTZW1lc3RlclllYXIgPSBub3cuZ2V0RnVsbFllYXIoKSAtIDFcbiAgc2Vjb25kU2VtZXN0ZXJZZWFyID0gbm93LmdldEZ1bGxZZWFyKClcbn0gZWxzZSB7XG4gIGZpcnN0U2VtZXN0ZXJZZWFyID0gbm93LmdldEZ1bGxZZWFyKClcbiAgc2Vjb25kU2VtZXN0ZXJZZWFyID0gbm93LmdldEZ1bGxZZWFyKCkgKyAxXG59XG5cbi8vINCy0YvQstC+0LQg0L/QtdGA0LjQvtC00LAg0LIg0LfQsNCz0L7Qu9C+0LLQutC1XG5jb25zdCB0aXRsZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwidGl0bGVcIilcbnRpdGxlLmZpcnN0RWxlbWVudENoaWxkLmlubmVyVGV4dCA9IGZpcnN0U2VtZXN0ZXJZZWFyXG50aXRsZS5sYXN0RWxlbWVudENoaWxkLmlubmVyVGV4dCA9IHNlY29uZFNlbWVzdGVyWWVhclxuXG5leHBvcnQgeyBmaXJzdFNlbWVzdGVyWWVhciwgc2Vjb25kU2VtZXN0ZXJZZWFyIH0iLCJpbXBvcnQgeyBnZXRNb250aE5hbWUgfSBmcm9tIFwiLi4vZnVuY3Rpb25zXCJcbmltcG9ydCB7IGZpcnN0U2VtZXN0ZXJZZWFyLCBzZWNvbmRTZW1lc3RlclllYXIgfSBmcm9tIFwiLi9jdXJyZW50LXBlcmlvZFwiXG5cbi8vINC+0YTQuNGG0LjQsNC70YzQvdGL0LUg0L/RgNCw0LfQtNC90LjRh9C90YvQtSDQtNC90LhcbmNvbnN0IGhvbGlkYXlzID0gW1xuICB7XG4gICAgbmFtZTogXCLQlNC10L3RjCDRg9C60YDQsNGX0L3RgdGM0LrQvtGXINC00LXRgNC20LDQstC90L7RgdGC0ZZcIixcbiAgICBkYXRlOiBmaXJzdFNlbWVzdGVyWWVhciArIFwiLTA3LTI4XCIsXG4gIH0sXG4gIHtcbiAgICBuYW1lOiBcItCU0LXQvdGMINCd0LXQt2HQu9C10LbQvdC+0YHRgtGWINCj0LrRgNCw0ZfQvdC4XCIsXG4gICAgZGF0ZTogZmlyc3RTZW1lc3RlclllYXIgKyBcIi0wOC0yNFwiLFxuICB9LFxuICB7XG4gICAgbmFtZTogXCLQlNC10L3RjCDQt9Cw0YXQuNGB0L3QuNC60ZbQsiDRliDQt9Cw0YXQuNGB0L3QuNGG0Ywg0KPQutGA0LDRl9C90LhcIixcbiAgICBkYXRlOiBmaXJzdFNlbWVzdGVyWWVhciArIFwiLTEwLTE0XCIsXG4gIH0sXG4gIHtcbiAgICBuYW1lOiBcItCg0ZbQt9C00LLQviDQpdGA0LjRgdGC0L7QstC1XCIsXG4gICAgZGF0ZTogZmlyc3RTZW1lc3RlclllYXIgKyBcIi0xMi0yNVwiLFxuICB9LFxuICB7XG4gICAgbmFtZTogXCLQndC+0LLQuNC5INGA0ZbQulwiLFxuICAgIGRhdGU6IHNlY29uZFNlbWVzdGVyWWVhciArIFwiLTAxLTAxXCIsXG4gIH0sXG4gIHtcbiAgICBuYW1lOiBcItCg0ZbQt9C00LLQviDQpdGA0LjRgdGC0L7QstC1XCIsXG4gICAgZGF0ZTogc2Vjb25kU2VtZXN0ZXJZZWFyICsgXCItMDEtMDdcIixcbiAgfSxcbiAge1xuICAgIG5hbWU6IFwi0JzRltC20L3QsNGA0L7QtNC90LjQuSDQttGW0L3QvtGH0LjQuSDQtNC10L3RjFwiLFxuICAgIGRhdGU6IHNlY29uZFNlbWVzdGVyWWVhciArIFwiLTAzLTA4XCIsXG4gIH0sXG4gIHtcbiAgICBuYW1lOiBcItCS0LXQu9C40LrQtNC10L3RjFwiLFxuICAgIGRhdGU6IHNlY29uZFNlbWVzdGVyWWVhciArIFwiLTA0LTE2XCIsXG4gIH0sXG4gIHtcbiAgICBuYW1lOiBcItCU0LXQvdGMINC/0YDQsNGG0ZZcIixcbiAgICBkYXRlOiBzZWNvbmRTZW1lc3RlclllYXIgKyBcIi0wNS0wMVwiLFxuICB9LFxuICB7XG4gICAgbmFtZTogXCLQlNC10L3RjCDQn9C10YDQtdC80L7Qs9C4XCIsXG4gICAgZGF0ZTogc2Vjb25kU2VtZXN0ZXJZZWFyICsgXCItMDUtMDlcIixcbiAgfSxcbiAge1xuICAgIG5hbWU6IFwi0YHQstGP0YLQviDQotGA0ZbQudGG0ZZcIixcbiAgICBkYXRlOiBzZWNvbmRTZW1lc3RlclllYXIgKyBcIi0wNi0wNFwiLFxuICB9LFxuICB7XG4gICAgbmFtZTogXCLQlNC10L3RjCDQmtC+0L3RgdGC0LjRgtGD0YbRltGXINCj0LrRgNCw0ZfQvdC4XCIsXG4gICAgZGF0ZTogc2Vjb25kU2VtZXN0ZXJZZWFyICsgXCItMDYtMjhcIixcbiAgfSxcbl1cblxuY29uc3QgYXJySG9saWRheXMgPSBbXVxuXG4vLyDQstGL0LLQvtC0INC/0YDQsNC30LTQvdGC0LrQvtCyINC90LAg0YHRgtGA0LDQvdC40YbQtVxuZm9yIChsZXQgaXRlbSBvZiBob2xpZGF5cykge1xuICBsZXQgZGF0ZSA9IG5ldyBEYXRlKGl0ZW0uZGF0ZSlcblxuICAvLyBhcnJIb2xpZGF5cy5wdXNoKGRhdGUuZ2V0VGltZSgpKVxuXG4gIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiY29sbGFwc2VIb2xpZGF5c1wiKS5pbm5lckhUTUwgKz0gYFxuICAgICAgICAgIDxwPiR7ZGF0ZS5nZXREYXRlKCl9ICR7Z2V0TW9udGhOYW1lKGRhdGUpfSDigJQgJHtpdGVtLm5hbWV9PC9wPlxuICAgICAgYFxufVxuXG5leHBvcnQgeyBhcnJIb2xpZGF5cyB9XG4iLCJpbXBvcnQgeyBjb252ZXJ0RGF0ZSwgZ2V0V2Vla0RheUFiYnIgfSBmcm9tIFwiLi4vZnVuY3Rpb25zXCJcblxuY29uc3Qgb3V0RGF0ZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwib3V0LWRhdGVcIilcbmNvbnN0IG91dENvdW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJvdXQtY291bnRcIilcbmNvbnN0IG91dERheSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwib3V0LWRheVwiKVxuY29uc3Qgb3V0VGFibGUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcIm91dC10YWJsZVwiKVxuXG4vLyDRhNGD0L3QutGG0LjRjyDQvtGH0LjRgdGC0LrQuCDQv9C+0LvRj1xuZXhwb3J0IGNvbnN0IG91dHB1dFJlc2V0ID0gKCkgPT4ge1xuICBvdXREYXRlLmlubmVySFRNTCA9IFwiXCJcbiAgb3V0Q291bnQuaW5uZXJIVE1MID0gXCJcIlxuICBvdXREYXkuaW5uZXJIVE1MID0gXCJcIlxuICBvdXRUYWJsZS5pbm5lckhUTUwgPSBcIlwiXG59XG5cbi8vINGE0YPQvdC60YbQuNGPINCy0YvQstC+0LTQsiDRiNCw0L/QutC4INGC0LDQsdC70LjRhtGLXG5leHBvcnQgY29uc3Qgb3V0cHV0SGVhZCA9ICgpID0+IHtcbiAgb3V0Q291bnQuaW5uZXJIVE1MICs9IGBcbiAgICAgICAgICAgICAgICA8dHI+XG4gICAgICAgICAgICAgICAgICAgIDx0aD7Qvy/QvTwvdGg+XG4gICAgICAgICAgICAgICAgPC90cj5cbiAgICAgICAgICAgIGBcblxuICBvdXREYXRlLmlubmVySFRNTCArPSBgXG4gICAgICAgICAgICAgICAgPHRyPlxuICAgICAgICAgICAgICAgICAgICA8dGg+0LTQsNGC0LA8L3RoPlxuICAgICAgICAgICAgICAgIDwvdHI+XG4gICAgICAgICAgICBgXG5cbiAgb3V0RGF5LmlubmVySFRNTCArPSBgXG4gICAgICAgICAgICAgICAgPHRyPlxuICAgICAgICAgICAgICAgICAgICA8dGg+0LQv0YI8L3RoPlxuICAgICAgICAgICAgICAgIDwvdHI+XG4gICAgICAgICAgICBgXG5cbiAgb3V0VGFibGUuaW5uZXJIVE1MICs9IGBcbiAgICAgICAgICAgICAgICA8dHI+XG4gICAgICAgICAgICAgICAgICAgIDx0aD7Qvy/QvTwvdGg+XG4gICAgICAgICAgICAgICAgICAgIDx0aD7QtNCw0YLQsDwvdGg+XG4gICAgICAgICAgICAgICAgICAgIDx0aD7QtC/RgjwvdGg+XG4gICAgICAgICAgICAgICAgPC90cj5cbiAgICAgICAgICAgIGBcbn1cblxuLy8g0YTRg9C90LrRhtC40Y8g0LLRi9Cy0L7QtNCyINGA0LXQt9GD0LvRjNGC0LDRgtCwXG5leHBvcnQgY29uc3Qgb3V0cHV0VGFibGUgPSAobnVtYmVyLCBkYXRlLCBzbikgPT4ge1xuICBmb3IgKGxldCBpID0gMDsgaSA8IG51bWJlcjsgaSsrKSB7XG4gICAgb3V0Q291bnQuaW5uZXJIVE1MICs9IGBcbiAgICAgICAgICAgICAgICA8dHI+XG4gICAgICAgICAgICAgICAgICAgIDx0ZD4ke3NufTwvdGQ+XG4gICAgICAgICAgICAgICAgPC90cj5cbiAgICAgICAgICAgIGBcblxuICAgIG91dERhdGUuaW5uZXJIVE1MICs9IGBcbiAgICAgICAgICAgICAgICA8dHI+XG4gICAgICAgICAgICAgICAgICAgIDx0ZD4ke2NvbnZlcnREYXRlKGRhdGUpfTwvdGQ+XG4gICAgICAgICAgICAgICAgPC90cj5cbiAgICAgICAgICAgIGBcblxuICAgIG91dERheS5pbm5lckhUTUwgKz0gYFxuICAgICAgICAgICAgICAgIDx0cj5cbiAgICAgICAgICAgICAgICAgICAgPHRkPiR7Z2V0V2Vla0RheUFiYnIoZGF0ZSl9PC90ZD5cbiAgICAgICAgICAgICAgICA8L3RyPlxuICAgICAgICAgICAgYFxuXG4gICAgb3V0VGFibGUuaW5uZXJIVE1MICs9IGBcbiAgICAgICAgICAgICAgICA8dHI+XG4gICAgICAgICAgICAgICAgICAgIDx0ZD4ke3NufTwvdGQ+XG4gICAgICAgICAgICAgICAgICAgIDx0ZD4ke2NvbnZlcnREYXRlKGRhdGUpfTwvdGQ+XG4gICAgICAgICAgICAgICAgICAgIDx0ZD4ke2dldFdlZWtEYXlBYmJyKGRhdGUpfTwvdGQ+XG4gICAgICAgICAgICAgICAgPC90cj5cbiAgICAgICAgICAgIGBcbiAgICBcbiAgICBzbiArK1xuICB9XG4gIHJldHVybiBzblxufSIsImltcG9ydCB7IGFyckhvbGlkYXlzIH0gZnJvbSBcIi4uL2hvbGlkYXlzL2hvbGlkYXlzXCJcbmltcG9ydCB7IGFyclZhY2F0aW9ucyB9IGZyb20gXCIuLi9ob2xpZGF5cy92YWNhdGlvbnNcIlxuaW1wb3J0IHsgb3V0cHV0UmVzZXQsIG91dHB1dEhlYWQsIG91dHB1dFRhYmxlIH0gZnJvbSBcIi4vb3V0cHV0XCJcbmltcG9ydCB7IGdldFdlZWsgfSBmcm9tIFwiLi4vZnVuY3Rpb25zXCJcblxuY29uc3QgZm9ybSA9ICgpID0+IHtcblxuICBjb25zdCBzdGFydERhdGUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInN0YXJ0LWRhdGVcIilcbiAgY29uc3QgZW5kRGF0ZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiZW5kLWRhdGVcIilcbiAgXG4gIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiZm9ybS1tYWluXCIpLmFkZEV2ZW50TGlzdGVuZXIoXCJzdWJtaXRcIiwgZnVuY3Rpb24oZSkge1xuICAgIGUucHJldmVudERlZmF1bHQoKVxuICAgIG91dHB1dFJlc2V0KClcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImV4cG9ydFhMU1hcIikuY2xhc3NMaXN0LmFkZChcImQtbm9uZVwiKVxuXG4gICAgdGhpcy5jbGFzc0xpc3QuYWRkKFwid2FzLXZhbGlkYXRlZFwiKVxuXG4gICAgaWYgKHRoaXMuY2hlY2tWYWxpZGl0eSgpKSB7XG5cbiAgICAgIGxldCBkYXlzV2VlayA9IFtdXG4gICAgICBsZXQgY2hlY2tlZCA9IGZhbHNlXG5cbiAgICAgIGZvciAobGV0IGVsZW0gb2YgZG9jdW1lbnQuZ2V0RWxlbWVudHNCeU5hbWUoXCJkYXlcIikpIHtcbiAgICAgICAgaWYgKGVsZW0uY2hlY2tlZCkge1xuICAgICAgICAgIGRheXNXZWVrLnB1c2goK2VsZW0udmFsdWUpXG4gICAgICAgICAgY2hlY2tlZCA9IHRydWVcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyDQv9GA0L7QstC10YDQutCwINCy0LLQvtC00LAg0L/RgNCw0LLQuNC70YzQvdC+0LPQviDQtNC40LDQv9Cw0LfQvtC90LAg0LTQsNGCXG4gICAgICBpZiAoZW5kRGF0ZS52YWx1ZSA8IHN0YXJ0RGF0ZS52YWx1ZSkge1xuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZmVlZGJhY2tSYW5nZScpLmNsYXNzTGlzdC5yZW1vdmUoXCJkLW5vbmVcIilcbiAgICAgICAgc3RhcnREYXRlLmNsYXNzTGlzdC5hZGQoXCJpcy1pbnZhbGlkXCIpXG4gICAgICAgIGVuZERhdGUuY2xhc3NMaXN0LmFkZChcImlzLWludmFsaWRcIilcbiAgICAgICAgZm9yIChsZXQgaXRlbSBvZiBkb2N1bWVudC5nZXRFbGVtZW50c0J5TmFtZSgncmFuZ2UnKSkge1xuICAgICAgICAgIGl0ZW0uYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgKCkgPT4ge1xuICAgICAgICAgICAgaWYgKGVuZERhdGUudmFsdWUgPj0gc3RhcnREYXRlLnZhbHVlKSB7XG4gICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdmZWVkYmFja1JhbmdlJykuY2xhc3NMaXN0LmFkZChcImQtbm9uZVwiKVxuICAgICAgICAgICAgICBzdGFydERhdGUuY2xhc3NMaXN0LnJlbW92ZShcImlzLWludmFsaWRcIilcbiAgICAgICAgICAgICAgZW5kRGF0ZS5jbGFzc0xpc3QucmVtb3ZlKFwiaXMtaW52YWxpZFwiKVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8g0L/RgNC+0LLQtdGA0LrQsCDQstGL0LHRgNCw0L3RiyDQu9C4INC00L3QuCDRgSDQstGL0LLQvtC00L7QvCDQv9GA0LXQtNGD0L/RgNC10LbQtNC10L3QuNGPXG4gICAgICBjaGVja2VkID09IGZhbHNlXG4gICAgICAgID8gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2ZlZWRiYWNrQ2hlY2tib3gnKS5jbGFzc0xpc3QucmVtb3ZlKFwiZC1ub25lXCIpXG4gICAgICAgIDogZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2ZlZWRiYWNrQ2hlY2tib3gnKS5jbGFzc0xpc3QuYWRkKFwiZC1ub25lXCIpXG5cbiAgICAgIGlmIChjaGVja2VkID09IHRydWUgJiYgZW5kRGF0ZS52YWx1ZSA+PSBzdGFydERhdGUudmFsdWUpIHtcblxuICAgICAgICBjb25zdCBzdGFydCA9IERhdGUucGFyc2Uoc3RhcnREYXRlLnZhbHVlKVxuICAgICAgICBjb25zdCBlbmQgPSBEYXRlLnBhcnNlKGVuZERhdGUudmFsdWUpXG5cbiAgICAgICAgbGV0IHNuID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJpbml0aWFsTnVtYmVyXCIpLnZhbHVlXG5cbiAgICAgICAgb3V0cHV0SGVhZCgpXG4gICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiZXhwb3J0WExTWFwiKS5jbGFzc0xpc3QucmVtb3ZlKFwiZC1ub25lXCIpXG5cbiAgICAgICAgLy8g0L/QtdGA0LXQsdC+0YAg0LLRgdC10YUg0LTQsNGCINCyINCy0YvQsdGA0LDQvdC90L7QvCDQv9GA0L7QvNC10LbRg9GC0LrQtVxuICAgICAgICBmb3IgKGxldCBpID0gc3RhcnQ7IGkgPD0gZW5kOyBpID0gaSArIDI0ICogNjAgKiA2MCAqIDEwMDApIHtcbiAgICAgICAgICAvLyDQtNCw0YLQsCDQvdC1INC00L7Qu9C20L3QsCDQstGF0L7QtNC40YLRjCDQsiDQv9GA0LDQt9C00L3QuNC60Lgg0Lgg0LrQsNC90LjQutGD0LvRi1xuICAgICAgICAgIGlmICghYXJySG9saWRheXMuaW5jbHVkZXMoaSkgJiYgIWFyclZhY2F0aW9ucy5pbmNsdWRlcyhpKSkge1xuICAgICAgICAgICAgbGV0IGRhdGUgPSBuZXcgRGF0ZShpKVxuXG4gICAgICAgICAgICAvLyDQv9GA0L7QstC10YDQutCwINCy0YXQvtC00LjRgiDQu9C4INC00LDRgtCwINCyINC80LDRgdGB0LjQsiDQtNC90LXQuSDQvdC10LTQtdC70LhcbiAgICAgICAgICAgIGlmIChkYXlzV2Vlay5pbmNsdWRlcyhkYXRlLmdldERheSgpKSkge1xuICAgICAgICAgICAgICAvLyDQt9C90LDRh9C10L3QuNC1INC60L7Qu9C40YfQtdGB0YLQstCwINGD0YDQvtC60L7QsiDQsiDQtNC10L3RjCDQuNC3IHNlbGVjdFxuICAgICAgICAgICAgICBsZXQgbnVtYmVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeU5hbWUoXCJudW1iZXJPZkxlc3NvbnNcIilbZGF0ZS5nZXREYXkoKSAtIDFdLnZhbHVlXG4gICAgICAgICAgICAgIGxldCBudW1iZXJWYWx1ZSA9IG51bWJlci5tYXRjaCgvXFxkL2cpXG5cbiAgICAgICAgICAgICAgaWYgKG51bWJlclZhbHVlLmxlbmd0aCA9PSAyKSB7XG4gICAgICAgICAgICAgICAgaWYgKGdldFdlZWsoaSwgc3RhcnQpID09IFwib2RkXCIpIHtcbiAgICAgICAgICAgICAgICAgIHNuID0gb3V0cHV0VGFibGUobnVtYmVyVmFsdWVbMF0sIGksIHNuKVxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZ2V0V2VlayhpLCBzdGFydCkgPT0gXCJldmVuXCIpIHtcbiAgICAgICAgICAgICAgICAgIHNuID0gb3V0cHV0VGFibGUobnVtYmVyVmFsdWVbMV0sIGksIHNuKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBzbj0gb3V0cHV0VGFibGUobnVtYmVyVmFsdWVbMF0sIGksIHNuKVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHRoaXMuY2xhc3NMaXN0LnJlbW92ZShcIndhcy12YWxpZGF0ZWRcIilcbiAgICB9XG4gIH0pXG59XG5cbmV4cG9ydCBkZWZhdWx0IGZvcm1cbiIsImNvbnN0IGV4cG9ydFhMU1ggPSAoKSA9PiB7XG4gIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiZXhwb3J0WExTWFwiKS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uKCkge1xuICAgIGxldCB3YiA9IFhMU1gudXRpbHMudGFibGVfdG9fYm9vayhkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcIm91dC10YWJsZVwiKSk7XG4gICAgWExTWC53cml0ZUZpbGUod2IsIFwiY2FsZW5kYXItcGxhbi54bHN4XCIpO1xuICB9KVxufVxuXG5leHBvcnQgZGVmYXVsdCBleHBvcnRYTFNYIiwiaW1wb3J0IGVkaXRWYWNhdGlvbnMgZnJvbSBcIi4vbW9kdWxlcy9ob2xpZGF5cy9tb2RhbC1lZGl0LXZhY2F0aW9uc1wiXG5pbXBvcnQgZGVmYXVsdFBlcmlvZHMgZnJvbSBcIi4vbW9kdWxlcy9tYWluLWZvcm0vZGVmYXVsdC1wZXJpb2RzXCJcbmltcG9ydCBjb3VudExlc3NvbnMgZnJvbSBcIi4vbW9kdWxlcy9tYWluLWZvcm0vY291bnQtbGVzc29uc1wiXG5pbXBvcnQgbW9kYWxDb3VudExlc3NvbnMgZnJvbSBcIi4vbW9kdWxlcy9tYWluLWZvcm0vbW9kYWwtY291bnQtbGVzc29uc1wiXG5pbXBvcnQgZm9ybSBmcm9tIFwiLi9tb2R1bGVzL21haW4tZm9ybS9mb3JtXCJcbmltcG9ydCBleHBvcnRYTFNYIGZyb20gXCIuL21vZHVsZXMvbWFpbi1mb3JtL2V4cG9ydFhMU1hcIlxuXG5cbmVkaXRWYWNhdGlvbnMoKVxuZGVmYXVsdFBlcmlvZHMoKVxuY291bnRMZXNzb25zKClcbm1vZGFsQ291bnRMZXNzb25zKClcbmZvcm0oKVxuZXhwb3J0WExTWCgpIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///828\n')}},__webpack_exports__={};__webpack_modules__[828]()})();