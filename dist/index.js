(()=>{"use strict";var __webpack_modules__={252:()=>{eval('\n;// ./src/modules/functions.js\n  // преобразование даты к виду ДД.ММ.ГГГГ\n  const convertDate = (data) => {\n    let date = new Date(data)\n\n    let day = date.getDate()\n    if (day < 10) {\n        day = \'0\' + day\n    }\n    let month = date.getMonth() + 1\n    if (month < 10) {\n        month = \'0\' + month\n    }\n    let year = date.getFullYear()\n\n    return  day + \'.\' + month + \'.\' + year\n  }\n\n  \n  // вычисление номера недели (четная - нечетная)\n  const getWeek = (current, start) => {\n    let currentDate = new Date(current)\n    let startDate = new Date(start)\n\n    let dayOfWeekOfStartDate = startDate.getDay()\n    if (dayOfWeekOfStartDate == 0) dayOfWeekOfStartDate = 7\n\n    let numberOfDays = Math.floor((currentDate - startDate) / (24 * 60 * 60 * 1000)) + 1\n    let weekNumber = Math.ceil(( numberOfDays + dayOfWeekOfStartDate - 1) / 7)\n    \n    return weekNumber % 2 === 0 ? \'even\' : \'odd\'\n  }\n\n\n  // получение названия дня недели\n  function getWeekDayAbbr(data) {\n    let date = new Date(data)\n\n    let days = [\'н\', \'пн\', \'в\', \'c\', \'ч\', \'пт\', \'сб\']\n\n    return days[date.getDay()]\n  }\n\n  // получение названия месяца\n  const getMonthName = (date) => {\n    const months = [\'січня\', \'лютого\', \'березня\', \'квітня\', \'травня\', \'червня\', \'липня\', \'серпня\', \'вересня\', \'жовтня\', \'листопада\', \'грудня\']\n\n    return months[date.getMonth()]\n  }\n\n\n;// ./src/modules/holidays/vacations.js\n\n\nconst vacations = [\n  {\n    name: "fall",\n    startDate: "2024-10-28",\n    endDate: "2024-11-03",\n    dates: [],\n  },\n  {\n    name: "winter",\n    startDate: "2024-12-30",\n    endDate: "2025-01-12",\n    dates: [],\n  },\n  {\n    name: "spring",\n    startDate: "2025-03-24",\n    endDate: "2025-03-30",\n    dates: [],\n  },\n]\n\n// сортировка массива каникул по дате\nconst organazeVacations = () => {\n  const compareItem = (a, b) => {\n    if (Date.parse(a.startDate) > Date.parse(b.startDate)) return 1\n    if (Date.parse(a.startDate) == Date.parse(b.startDate)) return 0\n    if (Date.parse(a.startDate) < Date.parse(b.startDate)) return -1\n  }\n\n  vacations.sort(compareItem)\n}\n\n// заполнение массива дат для определенных каникул\nconst createArrayDates = (vacationName) => {\n  let foundVacation = vacations.find((item) => item.name == vacationName)\n  foundVacation.dates = []\n  for (\n    let i = Date.parse(foundVacation.startDate);\n    i <= Date.parse(foundVacation.endDate);\n    i = i + 1000 * 3600 * 24\n  ) {\n    foundVacation.dates.push(i)\n  }\n}\n\ncreateArrayDates("fall")\ncreateArrayDates("winter")\ncreateArrayDates("spring")\n\n//Формирование массива дат всех каникул\nlet arrVacations = []\nconst createArrVacations = () => {\n  arrVacations = []\n  vacations.forEach((item) => {\n    arrVacations = arrVacations.concat(item.dates)\n  })\n}\n\ncreateArrVacations()\n\n// выаод каникул на странице\nconst outputVacations = () => {\n  const vacationsField = document.getElementById("vacations")\n  vacationsField.innerHTML = ""\n  for (let item of vacations) {\n    vacationsField.innerHTML += `\n        <div class="d-flex justify-content-between align-items-center mb-2">\n          <div>\n            з <span>${convertDate(item.startDate)}</span> до <span>${convertDate(item.endDate)}</span> \n          </div>\n          <div>\n            <button type="button" class="btn btn-primary" name="btnEditVacation" data-vacation-name=\'${\n              item.name\n            }\' data-bs-toggle="modal" data-bs-target="#modalEditVacationDates">\n                <i class="bi bi-pencil-square"></i>\n            </button>\n            <button type="button" class="btn btn-primary" name="btnDeleteVacation" data-vacation-name=\'${\n              item.name\n            }\' data-bs-toggle="modal" data-bs-target="#modalDeleteVacation">\n                <i class="bi bi-x-square"></i>\n            </button>\n          </div>\n        </div>\n      `\n  }\n}\n\noutputVacations()\n\n\n\n;// ./src/modules/holidays/vacation-delete.js\n\n\nlet vacationName\nlet divVacation\n\nconst clickBtnDeleteVacation = () => {\n  for (let btn of document.getElementsByName("btnDeleteVacation")) {\n    btn.addEventListener("click", () => {\n      vacationName = btn.dataset.vacationName\n      divVacation = btn.parentElement.parentElement\n    })\n  }\n}\nclickBtnDeleteVacation()\n\nconst deleteVacation = (vacationName) => {\n  let foundVacation = vacations.findIndex((item) => item.name == vacationName)\n  vacations.splice(foundVacation, 1)\n  divVacation.remove()\n}\n\ndocument.getElementById("btnConfirmDeleteVacation").addEventListener("click", () => {\n    deleteVacation(vacationName)\n    createArrVacations()\n  })\n\n\n\n;// ./src/modules/holidays/vacation-edit.js\n\n\n\nconst editVacationDates = (vacationName, startDate, endDate, displayVacationStartDate, displayVacationEndDate) => {\n    let foundVacation = vacations.find(item => item.name == vacationName)\n    foundVacation.startDate = startDate\n    foundVacation.endDate = endDate\n    displayVacationStartDate.innerText = convertDate(startDate)\n    displayVacationEndDate.innerText = convertDate(endDate)\n\n    organazeVacations()\n    outputVacations()\n    createArrayDates(vacationName)\n    createArrVacations()\n}\n;// ./src/modules/holidays/vacation-add.js\n\n\nconst addNewVacation = (vacationName, startDate, endDate) => {\n\n    vacations.push({\n        name: vacationName,\n        startDate: startDate,\n        endDate: endDate,\n        dates: []\n    })\n    \n    organazeVacations()\n    outputVacations()\n    createArrayDates(vacationName)\n    createArrVacations()\n}\n;// ./src/modules/holidays/modal-edit-vacations.js\n\n\n\n\n\nconst editVacations = () => {\n  const modalEditVacationDates = new bootstrap.Modal("#modalEditVacationDates")\n  const formEditVacationDates = document.getElementById("formEditVacationDates")\n\n  let vacationName\n  let newVacationName = 0\n  let displayVacationStartDate\n  let displayVacationEndDate\n  let flag\n\n  const clickBtnEditVacation = () => {\n    for (let btn of document.getElementsByName("btnEditVacation")) {\n      btn.addEventListener("click", () => {\n        flag = "edit"\n        vacationName = btn.dataset.vacationName\n        displayVacationStartDate = btn.parentElement.previousElementSibling.firstElementChild\n        displayVacationEndDate = btn.parentElement.previousElementSibling.lastElementChild\n\n        let foundVacation = vacations.find((item) => item.name == vacationName)\n        formEditVacationDates[0].value = foundVacation.startDate\n        formEditVacationDates[1].value = foundVacation.endDate\n      })\n    }\n  }\n  clickBtnEditVacation()\n\n  document.getElementById("btnAddVacation").addEventListener("click", () => {\n    flag = "add"\n    newVacationName ++\n    vacationName = newVacationName\n  })\n\n  // действия при закрытии модального окна без сохранения изменений\n  modalEditVacationDates._element.addEventListener("hidden.bs.modal", (e) => {\n    formEditVacationDates.reset()\n    formEditVacationDates.classList.remove("was-validated")\n    document.querySelector(".validationRange").classList.add("d-none")\n    for (let item of formEditVacationDates.inputVacationDate) {\n      item.classList.remove("is-invalid")\n      item.classList.remove("is-valid")\n    }\n  })\n\n  // проверка ввода правильного диапазона дат\n  let validationRange = true\n  for (let item of formEditVacationDates.inputVacationDate) {\n    item.addEventListener("change", () => {\n      if (formEditVacationDates[0].value != "" && formEditVacationDates[1].value != "") {\n        if (formEditVacationDates[0].value > formEditVacationDates[1].value) {\n          formEditVacationDates.classList.remove("was-validated")\n          document.querySelector(".validationRange").classList.remove("d-none")\n          formEditVacationDates[0].classList.remove("is-valid")\n          formEditVacationDates[1].classList.remove("is-valid")\n          formEditVacationDates[0].classList.add("is-invalid")\n          formEditVacationDates[1].classList.add("is-invalid")\n          validationRange = false\n        } else {\n          document.querySelector(".validationRange").classList.add("d-none")\n          formEditVacationDates[0].classList.remove("is-invalid")\n          formEditVacationDates[1].classList.remove("is-invalid")\n          formEditVacationDates[0].classList.add("is-valid")\n          formEditVacationDates[1].classList.add("is-valid")\n          validationRange = true\n        }\n      }\n    })\n  }\n\n  // обработка формы изменения новых дат каникул\n  formEditVacationDates.addEventListener("submit", function (e) {\n    e.preventDefault()\n\n    if (validationRange == true) {\n      this.classList.add("was-validated")\n      if (this.checkValidity()) {\n        let startDate = this[0].value\n        let endDate = this[1].value\n\n        if (flag == "add") {\n          addNewVacation(vacationName, startDate, endDate)\n          clickBtnEditVacation()\n          clickBtnDeleteVacation()\n        } else if (flag == "edit") {\n          editVacationDates(vacationName, startDate, endDate, displayVacationStartDate, displayVacationEndDate)\n          clickBtnEditVacation()\n          clickBtnDeleteVacation()\n        }\n\n        modalEditVacationDates.hide()\n        this.classList.remove("was-validated")\n        this.reset()\n      }\n    }\n  })\n}\n\n/* harmony default export */ const modal_edit_vacations = (editVacations);\n\n;// ./src/modules/holidays/current-period.js\nconst now = new Date()\n\nlet firstSemesterYear\nlet secondSemesterYear\n\nif (now.getMonth() >= 0 && now.getMonth() < 6) {\n  firstSemesterYear = now.getFullYear() - 1\n  secondSemesterYear = now.getFullYear()\n} else {\n  firstSemesterYear = now.getFullYear()\n  secondSemesterYear = now.getFullYear() + 1\n}\n\n// вывод периода в заголовке\nconst title = document.getElementById("title")\ntitle.firstElementChild.innerText = firstSemesterYear\ntitle.lastElementChild.innerText = secondSemesterYear\n\n\n;// ./src/modules/main-form/default-periods.js\n\n\nconst defaultPeriods = () => {\n  document.getElementById("btnFirstSemester").addEventListener("click", () => {\n    document.getElementById("start-date").value = `${firstSemesterYear}-09-01`\n    document.getElementById("end-date").value = `${firstSemesterYear}-12-31`\n  })\n\n  document.getElementById("btnSecondSemester").addEventListener("click", () => {\n    document.getElementById("start-date").value = `${secondSemesterYear}-01-01`\n    document.getElementById("end-date").value = `${secondSemesterYear}-05-31`\n  })\n}\n\n/* harmony default export */ const default_periods = (defaultPeriods);\n;// ./src/modules/main-form/count-lessons.js\nconst countLessons = () => {\n  const numberOfLessons = document.getElementsByName("numberOfLessons")\n\n  document.getElementsByName("day").forEach((item, index) => {\n    item.addEventListener("change", () => {\n      if (numberOfLessons[index].hasAttribute("disabled")) {\n        numberOfLessons[index].removeAttribute("disabled")\n      } else {\n        numberOfLessons[index].setAttribute("disabled", "disabled")\n      }\n\n      document.getElementById(\'feedbackCheckbox\').classList.add("d-none")\n    })\n  })\n}\n\n/* harmony default export */ const count_lessons = (countLessons);\n;// ./src/modules/main-form/modal-count-lessons.js\nconst modalCountLessons = () => {\n  const modalNumberOfLessons = new bootstrap.Modal("#modalNumberOfLessons")\n  const selectsNumberOfLessons = document.querySelectorAll(".selectNumberOfLessons")\n  const inputsNumderOfLessons = document.querySelectorAll(".inputNumderOfLessons")\n  const inputsRadioWeek = document.getElementsByName("radioWeek")\n  const inputEveryWeek = document.getElementById("inputEveryWeek")\n  const inputOddWeeks = document.getElementById("inputOddWeeks")\n  const inputEvenWeeks = document.getElementById("inputEvenWeeks")\n  const formChangeNumber = document.forms.changeNumberOfLessons\n\n  let weekDay\n\n  // вызов модального окна ввода количества уроков\n  selectsNumberOfLessons.forEach((item, index) => {\n    item.addEventListener("change", () => {\n      if (item.value == "other") {\n        modalNumberOfLessons.show()\n        weekDay = index\n      }\n    })\n  })\n\n  // действия при закрытии модального окна без сохранения изменений\n  modalNumberOfLessons._element.addEventListener("hidden.bs.modal", (e) => {\n    formChangeNumber.reset()\n    formChangeNumber.classList.remove("was-validated")\n\n    for (let elem of inputsNumderOfLessons) {\n      elem.setAttribute("disabled", "disabled")\n    }\n\n    if (selectsNumberOfLessons[weekDay].value == "other") {\n      selectsNumberOfLessons[weekDay].value = "1"\n    }\n  })\n\n  // активация/деактивация полей ввода количества уроков\n  for (let node of inputsRadioWeek) {\n    node.addEventListener("change", () => {\n      for (let elem of inputsNumderOfLessons) {\n        elem.setAttribute("disabled", "disabled")\n        elem.value = ""\n      }\n      for (let elem of node.parentElement.getElementsByTagName("*")) {\n        if (elem.classList.contains("inputNumderOfLessons")) {\n          elem.removeAttribute("disabled")\n        }\n      }\n    })\n  }\n\n  // подставление 0 в поле при заполнении только четного/нечетного поля\n  formChangeNumber.inWeek.forEach((item, index) => {\n    item.addEventListener("input", () => {\n      formChangeNumber.inWeek.forEach((it, ind) => {\n        if (ind != index && it.value == "") {\n          it.value = "0"\n        }\n      })\n    })\n  })\n\n  // обработка данных полей ввода количества уроков\n  formChangeNumber.addEventListener("submit", function(e) {\n    e.preventDefault()\n    this.classList.add("was-validated")\n\n    if (this.checkValidity()) {\n      // добавление нового элемента option в зависимости от выбора\n      let option\n      for (let node of inputsRadioWeek) {\n        if (node.checked && node.id == "radioEveryWeek") {\n          option = new Option(\n            inputEveryWeek.value,\n            inputEveryWeek.value,\n            false,\n            true\n          )\n        } else if (node.checked && node.id == "radioInAWeek") {\n          option = new Option(\n            inputOddWeeks.value + "/" + inputEvenWeeks.value,\n            inputOddWeeks.value + "/" + inputEvenWeeks.value,\n            false,\n            true\n          )\n        }\n      }\n      // проверка не дублируется ли option\n      let n = 0\n      for (let elem of selectsNumberOfLessons[weekDay].options) {\n        if (elem.value == option.value) {\n          n++\n        }\n      }\n      if (n == 0) {\n        selectsNumberOfLessons[weekDay].prepend(option)\n      } else {\n        selectsNumberOfLessons[weekDay].value = option.value\n      }\n\n      modalNumberOfLessons.hide()\n    }\n  })\n}\n\n/* harmony default export */ const modal_count_lessons = (modalCountLessons);\n;// ./src/modules/main-form/output.js\n\n\nconst outDate = document.getElementById("out-date")\nconst outCount = document.getElementById("out-count")\nconst outDay = document.getElementById("out-day")\nconst outTable = document.getElementById("out-table")\n\n// функция очистки поля\nconst outputReset = () => {\n  outDate.innerHTML = ""\n  outCount.innerHTML = ""\n  outDay.innerHTML = ""\n  outTable.innerHTML = ""\n}\n\n// функция выводв шапки таблицы\nconst outputHead = () => {\n  outCount.innerHTML += `\n                <tr>\n                    <th>п/н</th>\n                </tr>\n            `\n\n  outDate.innerHTML += `\n                <tr>\n                    <th>дата</th>\n                </tr>\n            `\n\n  outDay.innerHTML += `\n                <tr>\n                    <th>д/т</th>\n                </tr>\n            `\n\n  outTable.innerHTML += `\n                <tr>\n                    <th>п/н</th>\n                    <th>дата</th>\n                    <th>д/т</th>\n                </tr>\n            `\n}\n\n// функция выводв результата\nconst outputTable = (number, date, sn) => {\n  for (let i = 0; i < number; i++) {\n    outCount.innerHTML += `\n                <tr>\n                    <td>${sn}</td>\n                </tr>\n            `\n\n    outDate.innerHTML += `\n                <tr>\n                    <td>${convertDate(date)}</td>\n                </tr>\n            `\n\n    outDay.innerHTML += `\n                <tr>\n                    <td>${getWeekDayAbbr(date)}</td>\n                </tr>\n            `\n\n    outTable.innerHTML += `\n                <tr>\n                    <td>${sn}</td>\n                    <td>${convertDate(date)}</td>\n                    <td>${getWeekDayAbbr(date)}</td>\n                </tr>\n            `\n    \n    sn ++\n  }\n  return sn\n}\n;// ./src/modules/holidays/holidays.js\n\n\n\n// официальные праздничные дни\nconst holidays = [\n  {\n    name: "День української державності",\n    date: firstSemesterYear + "-07-28",\n  },\n  {\n    name: "День Незaлежності України",\n    date: firstSemesterYear + "-08-24",\n  },\n  {\n    name: "День захисників і захисниць України",\n    date: firstSemesterYear + "-10-14",\n  },\n  {\n    name: "Різдво Христове",\n    date: firstSemesterYear + "-12-25",\n  },\n  {\n    name: "Новий рік",\n    date: secondSemesterYear + "-01-01",\n  },\n  {\n    name: "Різдво Христове",\n    date: secondSemesterYear + "-01-07",\n  },\n  {\n    name: "Міжнародний жіночий день",\n    date: secondSemesterYear + "-03-08",\n  },\n  {\n    name: "Великдень",\n    date: secondSemesterYear + "-04-16",\n  },\n  {\n    name: "День праці",\n    date: secondSemesterYear + "-05-01",\n  },\n  {\n    name: "День Перемоги",\n    date: secondSemesterYear + "-05-09",\n  },\n  {\n    name: "свято Трійці",\n    date: secondSemesterYear + "-06-04",\n  },\n  {\n    name: "День Конституції України",\n    date: secondSemesterYear + "-06-28",\n  },\n]\n\nconst arrHolidays = []\n\n// вывод празднтков на странице\nfor (let item of holidays) {\n  let date = new Date(item.date)\n\n  // arrHolidays.push(date.getTime())\n\n  document.getElementById("collapseHolidays").innerHTML += `\n          <p>${date.getDate()} ${getMonthName(date)} — ${item.name}</p>\n      `\n}\n\n\n\n;// ./src/modules/main-form/adapt-weeks.js\n\r\n\r\n\r\n\r\n\r\nconst adaptWeeks = (startDate, endDate, daysWeek, sn) => {\r\n  let startD = startDate\r\n  // перебор всех дат в выбранном промежутке\r\n  for (let i = startDate; i <= endDate; i = i + 24 * 60 * 60 * 1000) {\r\n    // дата не должна входить в праздники и каникулы\r\n    if (!arrHolidays.includes(i) && !arrVacations.includes(i)) {\r\n      let date = new Date(i)\r\n\r\n      // проверка входит ли дата в массив дней недели\r\n      if (daysWeek.includes(date.getDay())) {\r\n        // значение количества уроков в день из select\r\n        let number = document.getElementsByName("numberOfLessons")[date.getDay() - 1].value\r\n        let numberValue = number.match(/\\d/g)\r\n\r\n        if (numberValue.length == 2) {\r\n          if (getWeek(i, startD) == "odd") {\r\n            sn = outputTable(numberValue[0], i, sn)\r\n          } else if (getWeek(i, startD) == "even") {\r\n            sn = outputTable(numberValue[1], i, sn)\r\n          }\r\n        } else {\r\n          sn = outputTable(numberValue[0], i, sn)\r\n        }\r\n      }\r\n    } else if (arrVacations.includes(i)) {\r\n      startD = i + 24 * 60 * 60 * 1000\r\n    }\r\n  }\r\n  return sn\r\n}\n;// ./src/modules/main-form/result.js\n\n\n\n\n\nconst result = (startDate, endDate, daysWeek, sn) => {\n  // перебор всех дат в выбранном промежутке\n  for (let i = startDate; i <= endDate; i = i + 24 * 60 * 60 * 1000) {\n    // дата не должна входить в праздники и каникулы\n    if (!arrHolidays.includes(i) && !arrVacations.includes(i)) {\n      let date = new Date(i)\n\n      // проверка входит ли дата в массив дней недели\n      if (daysWeek.includes(date.getDay())) {\n        // значение количества уроков в день из select\n        let number = document.getElementsByName("numberOfLessons")[date.getDay() - 1].value\n        let numberValue = number.match(/\\d/g)\n\n        if (numberValue.length == 2) {\n          if (getWeek(i, startDate) == "odd") {\n            sn = outputTable(numberValue[0], i, sn)\n          } else if (getWeek(i, startDate) == "even") {\n            sn = outputTable(numberValue[1], i, sn)\n          }\n        } else {\n          sn = outputTable(numberValue[0], i, sn)\n        }\n      }\n    }\n  }\n  return sn\n}\n\n;// ./src/modules/main-form/form.js\n\n\n\n\nconst form_form = () => {\n  \n  document.getElementById("form-main").addEventListener("submit", function(e) {\n    e.preventDefault()\n\n    outputReset()\n    document.getElementById("exportXLSX").classList.add("d-none")\n\n    this.classList.add("was-validated")\n\n    if (this.checkValidity()) {\n\n      const startPeriod = document.getElementById("start-date")\n      const endPeriod = document.getElementById("end-date")\n\n      let daysWeek = []\n      let checked = false\n\n      // проверка ввода правильного диапазона дат\n      if (endPeriod.value < startPeriod.value) {\n        document.getElementById(\'feedbackRange\').classList.remove("d-none")\n        startPeriod.classList.add("is-invalid")\n        endPeriod.classList.add("is-invalid")\n        for (let item of document.getElementsByName(\'range\')) {\n          item.addEventListener(\'change\', () => {\n            if (endPeriod.value >= startPeriod.value) {\n              document.getElementById(\'feedbackRange\').classList.add("d-none")\n              startPeriod.classList.remove("is-invalid")\n              endPeriod.classList.remove("is-invalid")\n            }\n          })\n        }\n      }\n\n       // заполнение массива дней недели\n      for (let elem of document.getElementsByName("day")) {\n        if (elem.checked) {\n          daysWeek.push(+elem.value)\n          checked = true\n        }\n      }\n\n      // проверка выбраны ли дни с выводом предупреждения\n      checked == false\n        ? document.getElementById(\'feedbackCheckbox\').classList.remove("d-none")\n        : document.getElementById(\'feedbackCheckbox\').classList.add("d-none")\n\n      if (checked == true && endPeriod.value >= startPeriod.value) {\n\n        document.getElementById(\'spinner\').classList.remove(\'d-none\')\n        document.getElementById(\'output\').classList.add(\'d-none\')\n        outputHead()\n        document.getElementById("exportXLSX").classList.remove("d-none")\n\n        const startDate = Date.parse(startPeriod.value)\n        const endDate = Date.parse(endPeriod.value)\n\n        let sn = document.getElementById("initialNumber").value\n        \n        if (document.getElementById("adaptWeeks").checked) {\n          adaptWeeks(startDate, endDate, daysWeek, sn)\n        } else {\n          result(startDate, endDate, daysWeek, sn)\n        }\n\n        setTimeout(() => {\n          document.getElementById(\'spinner\').classList.add(\'d-none\')\n          document.getElementById(\'output\').classList.remove(\'d-none\')\n          document.getElementById(\'btnReset\').classList.remove(\'d-none\')\n        }, 500);\n\n      }\n\n      this.classList.remove("was-validated")\n    }\n  })\n}\n\n/* harmony default export */ const main_form_form = (form_form);\n\n;// ./src/modules/main-form/exportXLSX.js\nconst exportXLSX = () => {\n  document.getElementById("exportXLSX").addEventListener(\'click\', function() {\n    let wb = XLSX.utils.table_to_book(document.getElementById("out-table"));\n    XLSX.writeFile(wb, "calendar-plan.xlsx");\n  })\n}\n\n/* harmony default export */ const main_form_exportXLSX = (exportXLSX);\n;// ./src/modules/main-form/reset-form.js\n\r\n\r\nconst resetForm = () => {\r\n  document.getElementById(\'btnReset\').addEventListener(\'click\', function() {\r\n    for(let item of document.getElementsByName("numberOfLessons")) {\r\n      item.setAttribute("disabled", "disabled")\r\n    }\r\n    outputReset()\r\n    document.getElementById("exportXLSX").classList.add("d-none")\r\n    this.classList.add("d-none")\r\n  })\r\n}\r\n\r\n/* harmony default export */ const reset_form = (resetForm);\n;// ./src/index.js\n\n\n\n\n\n\n\n\n\n\nmodal_edit_vacations()\ndefault_periods()\ncount_lessons()\nmodal_count_lessons()\nmain_form_form()\nmain_form_exportXLSX()\nreset_form()//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///252\n')}},__webpack_exports__={};__webpack_modules__[252]()})();